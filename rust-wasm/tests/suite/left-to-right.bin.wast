(module binary
  "\00\61\73\6d\01\00\00\00\01\c0\80\80\80\00\0d\60"
  "\02\7f\7f\01\7f\60\02\7e\7e\01\7f\60\02\7d\7d\01"
  "\7f\60\02\7c\7c\01\7f\60\00\00\60\00\01\7f\60\00"
  "\01\7e\60\00\01\7d\60\00\01\7c\60\02\7f\7f\00\60"
  "\02\7e\7e\00\60\02\7d\7d\00\60\02\7c\7c\00\03\84"
  "\81\80\80\00\82\01\00\00\01\01\02\02\03\03\04\04"
  "\05\05\05\05\05\05\06\06\06\05\05\07\07\07\05\05"
  "\08\08\08\05\05\09\0a\0b\0c\05\05\05\05\05\05\05"
  "\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05"
  "\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05"
  "\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05"
  "\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05"
  "\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05"
  "\05\05\05\05\05\05\05\05\04\85\80\80\80\00\01\70"
  "\01\08\08\05\83\80\80\80\00\01\00\01\07\aa\88\80"
  "\80\00\5f\07\69\33\32\5f\61\64\64\00\23\07\69\33"
  "\32\5f\73\75\62\00\24\07\69\33\32\5f\6d\75\6c\00"
  "\25\09\69\33\32\5f\64\69\76\5f\73\00\26\09\69\33"
  "\32\5f\64\69\76\5f\75\00\27\09\69\33\32\5f\72\65"
  "\6d\5f\73\00\28\09\69\33\32\5f\72\65\6d\5f\75\00"
  "\29\07\69\33\32\5f\61\6e\64\00\2a\06\69\33\32\5f"
  "\6f\72\00\2b\07\69\33\32\5f\78\6f\72\00\2c\07\69"
  "\33\32\5f\73\68\6c\00\2d\09\69\33\32\5f\73\68\72"
  "\5f\75\00\2e\09\69\33\32\5f\73\68\72\5f\73\00\2f"
  "\06\69\33\32\5f\65\71\00\30\06\69\33\32\5f\6e\65"
  "\00\31\08\69\33\32\5f\6c\74\5f\73\00\32\08\69\33"
  "\32\5f\6c\65\5f\73\00\33\08\69\33\32\5f\6c\74\5f"
  "\75\00\34\08\69\33\32\5f\6c\65\5f\75\00\35\08\69"
  "\33\32\5f\67\74\5f\73\00\36\08\69\33\32\5f\67\65"
  "\5f\73\00\37\08\69\33\32\5f\67\74\5f\75\00\38\08"
  "\69\33\32\5f\67\65\5f\75\00\39\09\69\33\32\5f\73"
  "\74\6f\72\65\00\3a\0a\69\33\32\5f\73\74\6f\72\65"
  "\38\00\3b\0b\69\33\32\5f\73\74\6f\72\65\31\36\00"
  "\3c\08\69\33\32\5f\63\61\6c\6c\00\3d\11\69\33\32"
  "\5f\63\61\6c\6c\5f\69\6e\64\69\72\65\63\74\00\3e"
  "\0a\69\33\32\5f\73\65\6c\65\63\74\00\3f\07\69\36"
  "\34\5f\61\64\64\00\40\07\69\36\34\5f\73\75\62\00"
  "\41\07\69\36\34\5f\6d\75\6c\00\42\09\69\36\34\5f"
  "\64\69\76\5f\73\00\43\09\69\36\34\5f\64\69\76\5f"
  "\75\00\44\09\69\36\34\5f\72\65\6d\5f\73\00\45\09"
  "\69\36\34\5f\72\65\6d\5f\75\00\46\07\69\36\34\5f"
  "\61\6e\64\00\47\06\69\36\34\5f\6f\72\00\48\07\69"
  "\36\34\5f\78\6f\72\00\49\07\69\36\34\5f\73\68\6c"
  "\00\4a\09\69\36\34\5f\73\68\72\5f\75\00\4b\09\69"
  "\36\34\5f\73\68\72\5f\73\00\4c\06\69\36\34\5f\65"
  "\71\00\4d\06\69\36\34\5f\6e\65\00\4e\08\69\36\34"
  "\5f\6c\74\5f\73\00\4f\08\69\36\34\5f\6c\65\5f\73"
  "\00\50\08\69\36\34\5f\6c\74\5f\75\00\51\08\69\36"
  "\34\5f\6c\65\5f\75\00\52\08\69\36\34\5f\67\74\5f"
  "\73\00\53\08\69\36\34\5f\67\65\5f\73\00\54\08\69"
  "\36\34\5f\67\74\5f\75\00\55\08\69\36\34\5f\67\65"
  "\5f\75\00\56\09\69\36\34\5f\73\74\6f\72\65\00\57"
  "\0a\69\36\34\5f\73\74\6f\72\65\38\00\58\0b\69\36"
  "\34\5f\73\74\6f\72\65\31\36\00\59\0b\69\36\34\5f"
  "\73\74\6f\72\65\33\32\00\5a\08\69\36\34\5f\63\61"
  "\6c\6c\00\5b\11\69\36\34\5f\63\61\6c\6c\5f\69\6e"
  "\64\69\72\65\63\74\00\5c\0a\69\36\34\5f\73\65\6c"
  "\65\63\74\00\5d\07\66\33\32\5f\61\64\64\00\5e\07"
  "\66\33\32\5f\73\75\62\00\5f\07\66\33\32\5f\6d\75"
  "\6c\00\60\07\66\33\32\5f\64\69\76\00\61\0c\66\33"
  "\32\5f\63\6f\70\79\73\69\67\6e\00\62\06\66\33\32"
  "\5f\65\71\00\63\06\66\33\32\5f\6e\65\00\64\06\66"
  "\33\32\5f\6c\74\00\65\06\66\33\32\5f\6c\65\00\66"
  "\06\66\33\32\5f\67\74\00\67\06\66\33\32\5f\67\65"
  "\00\68\07\66\33\32\5f\6d\69\6e\00\69\07\66\33\32"
  "\5f\6d\61\78\00\6a\09\66\33\32\5f\73\74\6f\72\65"
  "\00\6b\08\66\33\32\5f\63\61\6c\6c\00\6c\11\66\33"
  "\32\5f\63\61\6c\6c\5f\69\6e\64\69\72\65\63\74\00"
  "\6d\0a\66\33\32\5f\73\65\6c\65\63\74\00\6e\07\66"
  "\36\34\5f\61\64\64\00\6f\07\66\36\34\5f\73\75\62"
  "\00\70\07\66\36\34\5f\6d\75\6c\00\71\07\66\36\34"
  "\5f\64\69\76\00\72\0c\66\36\34\5f\63\6f\70\79\73"
  "\69\67\6e\00\73\06\66\36\34\5f\65\71\00\74\06\66"
  "\36\34\5f\6e\65\00\75\06\66\36\34\5f\6c\74\00\76"
  "\06\66\36\34\5f\6c\65\00\77\06\66\36\34\5f\67\74"
  "\00\78\06\66\36\34\5f\67\65\00\79\07\66\36\34\5f"
  "\6d\69\6e\00\7a\07\66\36\34\5f\6d\61\78\00\7b\09"
  "\66\36\34\5f\73\74\6f\72\65\00\7c\08\66\36\34\5f"
  "\63\61\6c\6c\00\7d\11\66\36\34\5f\63\61\6c\6c\5f"
  "\69\6e\64\69\72\65\63\74\00\7e\0a\66\36\34\5f\73"
  "\65\6c\65\63\74\00\7f\05\62\72\5f\69\66\00\80\01"
  "\08\62\72\5f\74\61\62\6c\65\00\81\01\09\8e\80\80"
  "\80\00\01\00\41\00\0b\08\00\01\02\03\04\05\06\07"
  "\0a\b2\91\80\80\00\82\01\84\80\80\80\00\00\41\7f"
  "\0b\84\80\80\80\00\00\41\7e\0b\84\80\80\80\00\00"
  "\41\7f\0b\84\80\80\80\00\00\41\7e\0b\84\80\80\80"
  "\00\00\41\7f\0b\84\80\80\80\00\00\41\7e\0b\84\80"
  "\80\80\00\00\41\7f\0b\84\80\80\80\00\00\41\7e\0b"
  "\89\80\80\80\00\00\41\08\41\00\36\02\00\0b\a7\80"
  "\80\80\00\00\41\0b\41\0a\2d\00\00\3a\00\00\41\0a"
  "\41\09\2d\00\00\3a\00\00\41\09\41\08\2d\00\00\3a"
  "\00\00\41\08\41\7d\3a\00\00\0b\87\80\80\80\00\00"
  "\41\08\28\02\00\0b\8d\80\80\80\00\00\10\09\41\08"
  "\41\01\3a\00\00\41\00\0b\8d\80\80\80\00\00\10\09"
  "\41\08\41\02\3a\00\00\41\01\0b\8d\80\80\80\00\00"
  "\10\09\41\08\41\03\3a\00\00\41\01\0b\8d\80\80\80"
  "\00\00\10\09\41\08\41\04\3a\00\00\41\00\0b\8d\80"
  "\80\80\00\00\10\09\41\08\41\05\3a\00\00\41\00\0b"
  "\8d\80\80\80\00\00\10\09\41\08\41\01\3a\00\00\42"
  "\00\0b\8d\80\80\80\00\00\10\09\41\08\41\02\3a\00"
  "\00\42\01\0b\8d\80\80\80\00\00\10\09\41\08\41\03"
  "\3a\00\00\42\01\0b\8d\80\80\80\00\00\10\09\41\08"
  "\41\04\3a\00\00\41\02\0b\8d\80\80\80\00\00\10\09"
  "\41\08\41\05\3a\00\00\41\00\0b\90\80\80\80\00\00"
  "\10\09\41\08\41\01\3a\00\00\43\00\00\00\00\0b\90"
  "\80\80\80\00\00\10\09\41\08\41\02\3a\00\00\43\00"
  "\00\80\3f\0b\90\80\80\80\00\00\10\09\41\08\41\03"
  "\3a\00\00\43\00\00\80\3f\0b\8d\80\80\80\00\00\10"
  "\09\41\08\41\04\3a\00\00\41\04\0b\8d\80\80\80\00"
  "\00\10\09\41\08\41\05\3a\00\00\41\00\0b\94\80\80"
  "\80\00\00\10\09\41\08\41\01\3a\00\00\44\00\00\00"
  "\00\00\00\00\00\0b\94\80\80\80\00\00\10\09\41\08"
  "\41\02\3a\00\00\44\00\00\00\00\00\00\f0\3f\0b\94"
  "\80\80\80\00\00\10\09\41\08\41\03\3a\00\00\44\00"
  "\00\00\00\00\00\f0\3f\0b\8d\80\80\80\00\00\10\09"
  "\41\08\41\04\3a\00\00\41\06\0b\8d\80\80\80\00\00"
  "\10\09\41\08\41\05\3a\00\00\41\00\0b\82\80\80\80"
  "\00\00\0b\82\80\80\80\00\00\0b\82\80\80\80\00\00"
  "\0b\82\80\80\80\00\00\0b\8c\80\80\80\00\00\10\08"
  "\10\0b\10\0c\6a\1a\10\0a\0b\8c\80\80\80\00\00\10"
  "\08\10\0b\10\0c\6b\1a\10\0a\0b\8c\80\80\80\00\00"
  "\10\08\10\0b\10\0c\6c\1a\10\0a\0b\8c\80\80\80\00"
  "\00\10\08\10\0b\10\0c\6d\1a\10\0a\0b\8c\80\80\80"
  "\00\00\10\08\10\0b\10\0c\6e\1a\10\0a\0b\8c\80\80"
  "\80\00\00\10\08\10\0b\10\0c\6f\1a\10\0a\0b\8c\80"
  "\80\80\00\00\10\08\10\0b\10\0c\70\1a\10\0a\0b\8c"
  "\80\80\80\00\00\10\08\10\0b\10\0c\71\1a\10\0a\0b"
  "\8c\80\80\80\00\00\10\08\10\0b\10\0c\72\1a\10\0a"
  "\0b\8c\80\80\80\00\00\10\08\10\0b\10\0c\73\1a\10"
  "\0a\0b\8c\80\80\80\00\00\10\08\10\0b\10\0c\74\1a"
  "\10\0a\0b\8c\80\80\80\00\00\10\08\10\0b\10\0c\76"
  "\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\0b\10\0c"
  "\75\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\0b\10"
  "\0c\46\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\0b"
  "\10\0c\47\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10"
  "\0b\10\0c\48\1a\10\0a\0b\8c\80\80\80\00\00\10\08"
  "\10\0b\10\0c\4c\1a\10\0a\0b\8c\80\80\80\00\00\10"
  "\08\10\0b\10\0c\49\1a\10\0a\0b\8c\80\80\80\00\00"
  "\10\08\10\0b\10\0c\4d\1a\10\0a\0b\8c\80\80\80\00"
  "\00\10\08\10\0b\10\0c\4a\1a\10\0a\0b\8c\80\80\80"
  "\00\00\10\08\10\0b\10\0c\4e\1a\10\0a\0b\8c\80\80"
  "\80\00\00\10\08\10\0b\10\0c\4b\1a\10\0a\0b\8c\80"
  "\80\80\00\00\10\08\10\0b\10\0c\4f\1a\10\0a\0b\8d"
  "\80\80\80\00\00\10\08\10\0b\10\0c\36\02\00\10\0a"
  "\0b\8d\80\80\80\00\00\10\08\10\0b\10\0c\3a\00\00"
  "\10\0a\0b\8d\80\80\80\00\00\10\08\10\0b\10\0c\3b"
  "\01\00\10\0a\0b\8c\80\80\80\00\00\10\08\10\0b\10"
  "\0c\10\1f\10\0a\0b\90\80\80\80\00\00\10\08\10\0b"
  "\10\0c\10\0e\11\00\00\1a\10\0a\0b\8e\80\80\80\00"
  "\00\10\08\10\0b\10\0c\10\0f\1b\1a\10\0a\0b\8c\80"
  "\80\80\00\00\10\08\10\10\10\11\7c\1a\10\0a\0b\8c"
  "\80\80\80\00\00\10\08\10\10\10\11\7d\1a\10\0a\0b"
  "\8c\80\80\80\00\00\10\08\10\10\10\11\7e\1a\10\0a"
  "\0b\8c\80\80\80\00\00\10\08\10\10\10\11\7f\1a\10"
  "\0a\0b\8c\80\80\80\00\00\10\08\10\10\10\11\80\1a"
  "\10\0a\0b\8c\80\80\80\00\00\10\08\10\10\10\11\81"
  "\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\10\10\11"
  "\82\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\10\10"
  "\11\83\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\10"
  "\10\11\84\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10"
  "\10\10\11\85\1a\10\0a\0b\8c\80\80\80\00\00\10\08"
  "\10\10\10\11\86\1a\10\0a\0b\8c\80\80\80\00\00\10"
  "\08\10\10\10\11\88\1a\10\0a\0b\8c\80\80\80\00\00"
  "\10\08\10\10\10\11\87\1a\10\0a\0b\8c\80\80\80\00"
  "\00\10\08\10\10\10\11\51\1a\10\0a\0b\8c\80\80\80"
  "\00\00\10\08\10\10\10\11\52\1a\10\0a\0b\8c\80\80"
  "\80\00\00\10\08\10\10\10\11\53\1a\10\0a\0b\8c\80"
  "\80\80\00\00\10\08\10\10\10\11\57\1a\10\0a\0b\8c"
  "\80\80\80\00\00\10\08\10\10\10\11\54\1a\10\0a\0b"
  "\8c\80\80\80\00\00\10\08\10\10\10\11\58\1a\10\0a"
  "\0b\8c\80\80\80\00\00\10\08\10\10\10\11\55\1a\10"
  "\0a\0b\8c\80\80\80\00\00\10\08\10\10\10\11\59\1a"
  "\10\0a\0b\8c\80\80\80\00\00\10\08\10\10\10\11\56"
  "\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\10\10\11"
  "\5a\1a\10\0a\0b\8d\80\80\80\00\00\10\08\10\0b\10"
  "\11\37\03\00\10\0a\0b\8d\80\80\80\00\00\10\08\10"
  "\0b\10\11\3c\00\00\10\0a\0b\8d\80\80\80\00\00\10"
  "\08\10\0b\10\11\3d\01\00\10\0a\0b\8d\80\80\80\00"
  "\00\10\08\10\0b\10\11\3e\02\00\10\0a\0b\8c\80\80"
  "\80\00\00\10\08\10\10\10\11\10\20\10\0a\0b\90\80"
  "\80\80\00\00\10\08\10\10\10\11\10\13\11\01\00\1a"
  "\10\0a\0b\8e\80\80\80\00\00\10\08\10\10\10\11\10"
  "\14\1b\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\15"
  "\10\16\92\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10"
  "\15\10\16\93\1a\10\0a\0b\8c\80\80\80\00\00\10\08"
  "\10\15\10\16\94\1a\10\0a\0b\8c\80\80\80\00\00\10"
  "\08\10\15\10\16\95\1a\10\0a\0b\8c\80\80\80\00\00"
  "\10\08\10\15\10\16\98\1a\10\0a\0b\8c\80\80\80\00"
  "\00\10\08\10\15\10\16\5b\1a\10\0a\0b\8c\80\80\80"
  "\00\00\10\08\10\15\10\16\5c\1a\10\0a\0b\8c\80\80"
  "\80\00\00\10\08\10\15\10\16\5d\1a\10\0a\0b\8c\80"
  "\80\80\00\00\10\08\10\15\10\16\5f\1a\10\0a\0b\8c"
  "\80\80\80\00\00\10\08\10\15\10\16\5e\1a\10\0a\0b"
  "\8c\80\80\80\00\00\10\08\10\15\10\16\60\1a\10\0a"
  "\0b\8c\80\80\80\00\00\10\08\10\15\10\16\96\1a\10"
  "\0a\0b\8c\80\80\80\00\00\10\08\10\15\10\16\97\1a"
  "\10\0a\0b\8d\80\80\80\00\00\10\08\10\0b\10\16\38"
  "\02\00\10\0a\0b\8c\80\80\80\00\00\10\08\10\15\10"
  "\16\10\21\10\0a\0b\90\80\80\80\00\00\10\08\10\15"
  "\10\16\10\18\11\02\00\1a\10\0a\0b\8e\80\80\80\00"
  "\00\10\08\10\15\10\16\10\19\1b\1a\10\0a\0b\8c\80"
  "\80\80\00\00\10\08\10\1a\10\1b\a0\1a\10\0a\0b\8c"
  "\80\80\80\00\00\10\08\10\1a\10\1b\a1\1a\10\0a\0b"
  "\8c\80\80\80\00\00\10\08\10\1a\10\1b\a2\1a\10\0a"
  "\0b\8c\80\80\80\00\00\10\08\10\1a\10\1b\a3\1a\10"
  "\0a\0b\8c\80\80\80\00\00\10\08\10\1a\10\1b\a6\1a"
  "\10\0a\0b\8c\80\80\80\00\00\10\08\10\1a\10\1b\61"
  "\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\1a\10\1b"
  "\62\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\1a\10"
  "\1b\63\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10\1a"
  "\10\1b\65\1a\10\0a\0b\8c\80\80\80\00\00\10\08\10"
  "\1a\10\1b\64\1a\10\0a\0b\8c\80\80\80\00\00\10\08"
  "\10\1a\10\1b\66\1a\10\0a\0b\8c\80\80\80\00\00\10"
  "\08\10\1a\10\1b\a4\1a\10\0a\0b\8c\80\80\80\00\00"
  "\10\08\10\1a\10\1b\a5\1a\10\0a\0b\8d\80\80\80\00"
  "\00\10\08\10\0b\10\1b\39\03\00\10\0a\0b\8c\80\80"
  "\80\00\00\10\08\10\1a\10\1b\10\22\10\0a\0b\90\80"
  "\80\80\00\00\10\08\10\1a\10\1b\10\1d\11\03\00\1a"
  "\10\0a\0b\8e\80\80\80\00\00\10\08\10\1a\10\1b\10"
  "\1e\1b\1a\10\0a\0b\93\80\80\80\00\00\02\7f\10\08"
  "\10\0b\10\0c\41\00\71\0d\00\1a\10\0a\0b\0b\95\80"
  "\80\80\00\00\02\7f\10\08\02\7f\10\0b\10\0c\0e\01"
  "\01\00\0b\1a\10\0a\0b\0b"
)
(assert_return (invoke "i32_add") (i32.const 258))
(assert_return (invoke "i64_add") (i32.const 258))
(assert_return (invoke "i32_sub") (i32.const 258))
(assert_return (invoke "i64_sub") (i32.const 258))
(assert_return (invoke "i32_mul") (i32.const 258))
(assert_return (invoke "i64_mul") (i32.const 258))
(assert_return (invoke "i32_div_s") (i32.const 258))
(assert_return (invoke "i64_div_s") (i32.const 258))
(assert_return (invoke "i32_div_u") (i32.const 258))
(assert_return (invoke "i64_div_u") (i32.const 258))
(assert_return (invoke "i32_rem_s") (i32.const 258))
(assert_return (invoke "i64_rem_s") (i32.const 258))
(assert_return (invoke "i32_rem_u") (i32.const 258))
(assert_return (invoke "i64_rem_u") (i32.const 258))
(assert_return (invoke "i32_and") (i32.const 258))
(assert_return (invoke "i64_and") (i32.const 258))
(assert_return (invoke "i32_or") (i32.const 258))
(assert_return (invoke "i64_or") (i32.const 258))
(assert_return (invoke "i32_xor") (i32.const 258))
(assert_return (invoke "i64_xor") (i32.const 258))
(assert_return (invoke "i32_shl") (i32.const 258))
(assert_return (invoke "i64_shl") (i32.const 258))
(assert_return (invoke "i32_shr_u") (i32.const 258))
(assert_return (invoke "i64_shr_u") (i32.const 258))
(assert_return (invoke "i32_shr_s") (i32.const 258))
(assert_return (invoke "i64_shr_s") (i32.const 258))
(assert_return (invoke "i32_eq") (i32.const 258))
(assert_return (invoke "i64_eq") (i32.const 258))
(assert_return (invoke "i32_ne") (i32.const 258))
(assert_return (invoke "i64_ne") (i32.const 258))
(assert_return (invoke "i32_lt_s") (i32.const 258))
(assert_return (invoke "i64_lt_s") (i32.const 258))
(assert_return (invoke "i32_le_s") (i32.const 258))
(assert_return (invoke "i64_le_s") (i32.const 258))
(assert_return (invoke "i32_lt_u") (i32.const 258))
(assert_return (invoke "i64_lt_u") (i32.const 258))
(assert_return (invoke "i32_le_u") (i32.const 258))
(assert_return (invoke "i64_le_u") (i32.const 258))
(assert_return (invoke "i32_gt_s") (i32.const 258))
(assert_return (invoke "i64_gt_s") (i32.const 258))
(assert_return (invoke "i32_ge_s") (i32.const 258))
(assert_return (invoke "i64_ge_s") (i32.const 258))
(assert_return (invoke "i32_gt_u") (i32.const 258))
(assert_return (invoke "i64_gt_u") (i32.const 258))
(assert_return (invoke "i32_ge_u") (i32.const 258))
(assert_return (invoke "i64_ge_u") (i32.const 258))
(assert_return (invoke "i32_store") (i32.const 258))
(assert_return (invoke "i64_store") (i32.const 258))
(assert_return (invoke "i32_store8") (i32.const 258))
(assert_return (invoke "i64_store8") (i32.const 258))
(assert_return (invoke "i32_store16") (i32.const 258))
(assert_return (invoke "i64_store16") (i32.const 258))
(assert_return (invoke "i64_store32") (i32.const 258))
(assert_return (invoke "i32_call") (i32.const 258))
(assert_return (invoke "i64_call") (i32.const 258))
(assert_return (invoke "i32_call_indirect") (i32.const 66_052))
(assert_return (invoke "i64_call_indirect") (i32.const 66_052))
(assert_return (invoke "i32_select") (i32.const 66_053))
(assert_return (invoke "i64_select") (i32.const 66_053))
(assert_return (invoke "f32_add") (i32.const 258))
(assert_return (invoke "f64_add") (i32.const 258))
(assert_return (invoke "f32_sub") (i32.const 258))
(assert_return (invoke "f64_sub") (i32.const 258))
(assert_return (invoke "f32_mul") (i32.const 258))
(assert_return (invoke "f64_mul") (i32.const 258))
(assert_return (invoke "f32_div") (i32.const 258))
(assert_return (invoke "f64_div") (i32.const 258))
(assert_return (invoke "f32_copysign") (i32.const 258))
(assert_return (invoke "f64_copysign") (i32.const 258))
(assert_return (invoke "f32_eq") (i32.const 258))
(assert_return (invoke "f64_eq") (i32.const 258))
(assert_return (invoke "f32_ne") (i32.const 258))
(assert_return (invoke "f64_ne") (i32.const 258))
(assert_return (invoke "f32_lt") (i32.const 258))
(assert_return (invoke "f64_lt") (i32.const 258))
(assert_return (invoke "f32_le") (i32.const 258))
(assert_return (invoke "f64_le") (i32.const 258))
(assert_return (invoke "f32_gt") (i32.const 258))
(assert_return (invoke "f64_gt") (i32.const 258))
(assert_return (invoke "f32_ge") (i32.const 258))
(assert_return (invoke "f64_ge") (i32.const 258))
(assert_return (invoke "f32_min") (i32.const 258))
(assert_return (invoke "f64_min") (i32.const 258))
(assert_return (invoke "f32_max") (i32.const 258))
(assert_return (invoke "f64_max") (i32.const 258))
(assert_return (invoke "f32_store") (i32.const 258))
(assert_return (invoke "f64_store") (i32.const 258))
(assert_return (invoke "f32_call") (i32.const 258))
(assert_return (invoke "f64_call") (i32.const 258))
(assert_return (invoke "f32_call_indirect") (i32.const 66_052))
(assert_return (invoke "f64_call_indirect") (i32.const 66_052))
(assert_return (invoke "f32_select") (i32.const 66_053))
(assert_return (invoke "f64_select") (i32.const 66_053))
(assert_return (invoke "br_if") (i32.const 258))
(assert_return (invoke "br_table") (i32.const 258))
