(module binary
  "\00\61\73\6d\01\00\00\00\01\af\80\80\80\00\0b\60"
  "\02\7f\7f\01\7f\60\00\01\7f\60\00\01\7e\60\01\7f"
  "\00\60\01\7e\00\60\00\01\7d\60\00\01\7c\60\01\7d"
  "\00\60\01\7c\00\60\00\00\60\01\7f\01\7f\03\ae\80"
  "\80\80\00\2d\01\02\01\02\03\04\05\06\05\06\07\08"
  "\09\01\01\01\01\01\01\01\01\01\01\01\01\01\00\01"
  "\01\01\09\09\01\01\0a\01\01\09\01\0a\0a\01\01\01"
  "\01\04\85\80\80\80\00\01\70\01\01\01\05\83\80\80"
  "\80\00\01\00\01\06\bd\80\80\80\00\08\7f\00\41\7e"
  "\0b\7d\00\43\00\00\40\c0\0b\7c\00\44\00\00\00\00"
  "\00\00\10\c0\0b\7e\00\42\7b\0b\7f\01\41\74\0b\7d"
  "\01\43\00\00\50\c1\0b\7c\01\44\00\00\00\00\00\00"
  "\2c\c0\0b\7e\01\42\71\0b\07\85\85\80\80\00\2a\05"
  "\67\65\74\2d\61\00\00\05\67\65\74\2d\62\00\01\05"
  "\67\65\74\2d\78\00\02\05\67\65\74\2d\79\00\03\05"
  "\73\65\74\2d\78\00\04\05\73\65\74\2d\79\00\05\05"
  "\67\65\74\2d\31\00\06\05\67\65\74\2d\32\00\07\05"
  "\67\65\74\2d\35\00\08\05\67\65\74\2d\36\00\09\05"
  "\73\65\74\2d\35\00\0a\05\73\65\74\2d\36\00\0b\0f"
  "\61\73\2d\73\65\6c\65\63\74\2d\66\69\72\73\74\00"
  "\0d\0d\61\73\2d\73\65\6c\65\63\74\2d\6d\69\64\00"
  "\0e\0e\61\73\2d\73\65\6c\65\63\74\2d\6c\61\73\74"
  "\00\0f\0d\61\73\2d\6c\6f\6f\70\2d\66\69\72\73\74"
  "\00\10\0b\61\73\2d\6c\6f\6f\70\2d\6d\69\64\00\11"
  "\0c\61\73\2d\6c\6f\6f\70\2d\6c\61\73\74\00\12\0f"
  "\61\73\2d\69\66\2d\63\6f\6e\64\69\74\69\6f\6e\00"
  "\13\0a\61\73\2d\69\66\2d\74\68\65\6e\00\14\0a\61"
  "\73\2d\69\66\2d\65\6c\73\65\00\15\0e\61\73\2d\62"
  "\72\5f\69\66\2d\66\69\72\73\74\00\16\0d\61\73\2d"
  "\62\72\5f\69\66\2d\6c\61\73\74\00\17\11\61\73\2d"
  "\62\72\5f\74\61\62\6c\65\2d\66\69\72\73\74\00\18"
  "\10\61\73\2d\62\72\5f\74\61\62\6c\65\2d\6c\61\73"
  "\74\00\19\16\61\73\2d\63\61\6c\6c\5f\69\6e\64\69"
  "\72\65\63\74\2d\66\69\72\73\74\00\1b\14\61\73\2d"
  "\63\61\6c\6c\5f\69\6e\64\69\72\65\63\74\2d\6d\69"
  "\64\00\1c\15\61\73\2d\63\61\6c\6c\5f\69\6e\64\69"
  "\72\65\63\74\2d\6c\61\73\74\00\1d\0e\61\73\2d\73"
  "\74\6f\72\65\2d\66\69\72\73\74\00\1e\0d\61\73\2d"
  "\73\74\6f\72\65\2d\6c\61\73\74\00\1f\0f\61\73\2d"
  "\6c\6f\61\64\2d\6f\70\65\72\61\6e\64\00\20\14\61"
  "\73\2d\6d\65\6d\6f\72\79\2e\67\72\6f\77\2d\76\61"
  "\6c\75\65\00\21\0d\61\73\2d\63\61\6c\6c\2d\76\61"
  "\6c\75\65\00\23\0f\61\73\2d\72\65\74\75\72\6e\2d"
  "\76\61\6c\75\65\00\24\0f\61\73\2d\64\72\6f\70\2d"
  "\6f\70\65\72\61\6e\64\00\25\0b\61\73\2d\62\72\2d"
  "\76\61\6c\75\65\00\26\12\61\73\2d\6c\6f\63\61\6c"
  "\2e\73\65\74\2d\76\61\6c\75\65\00\27\12\61\73\2d"
  "\6c\6f\63\61\6c\2e\74\65\65\2d\76\61\6c\75\65\00"
  "\28\13\61\73\2d\67\6c\6f\62\61\6c\2e\73\65\74\2d"
  "\76\61\6c\75\65\00\29\10\61\73\2d\75\6e\61\72\79"
  "\2d\6f\70\65\72\61\6e\64\00\2a\11\61\73\2d\62\69"
  "\6e\61\72\79\2d\6f\70\65\72\61\6e\64\00\2b\12\61"
  "\73\2d\63\6f\6d\70\61\72\65\2d\6f\70\65\72\61\6e"
  "\64\00\2c\09\87\80\80\80\00\01\00\41\00\0b\01\1a"
  "\0a\c9\84\80\80\00\2d\84\80\80\80\00\00\23\00\0b"
  "\84\80\80\80\00\00\23\03\0b\84\80\80\80\00\00\23"
  "\04\0b\84\80\80\80\00\00\23\07\0b\86\80\80\80\00"
  "\00\20\00\24\04\0b\86\80\80\80\00\00\20\00\24\07"
  "\0b\84\80\80\80\00\00\23\01\0b\84\80\80\80\00\00"
  "\23\02\0b\84\80\80\80\00\00\23\05\0b\84\80\80\80"
  "\00\00\23\06\0b\86\80\80\80\00\00\20\00\24\05\0b"
  "\86\80\80\80\00\00\20\00\24\06\0b\82\80\80\80\00"
  "\00\0b\89\80\80\80\00\00\23\04\41\02\41\03\1b\0b"
  "\89\80\80\80\00\00\41\02\23\04\41\03\1b\0b\89\80"
  "\80\80\00\00\41\02\41\03\23\04\1b\0b\8b\80\80\80"
  "\00\00\03\7f\23\04\10\0c\10\0c\0b\0b\8b\80\80\80"
  "\00\00\03\7f\10\0c\23\04\10\0c\0b\0b\8b\80\80\80"
  "\00\00\03\7f\10\0c\10\0c\23\04\0b\0b\90\80\80\80"
  "\00\00\23\04\04\7f\10\0c\41\02\05\10\0c\41\03\0b"
  "\0b\8c\80\80\80\00\00\41\01\04\7f\23\04\05\41\02"
  "\0b\0b\8c\80\80\80\00\00\41\00\04\7f\41\02\05\23"
  "\04\0b\0b\8e\80\80\80\00\00\02\7f\23\04\41\02\0d"
  "\00\41\03\0f\0b\0b\8e\80\80\80\00\00\02\7f\41\02"
  "\23\04\0d\00\41\03\0f\0b\0b\8d\80\80\80\00\00\02"
  "\7f\23\04\41\02\0e\01\00\00\0b\0b\8d\80\80\80\00"
  "\00\02\7f\41\02\23\04\0e\01\00\00\0b\0b\84\80\80"
  "\80\00\00\20\00\0b\8e\80\80\80\00\00\02\7f\23\04"
  "\41\02\41\00\11\00\00\0b\0b\8e\80\80\80\00\00\02"
  "\7f\41\02\23\04\41\00\11\00\00\0b\0b\8e\80\80\80"
  "\00\00\02\7f\41\02\41\00\23\04\11\00\00\0b\0b\89"
  "\80\80\80\00\00\23\04\41\01\36\02\00\0b\89\80\80"
  "\80\00\00\41\00\23\04\36\02\00\0b\87\80\80\80\00"
  "\00\23\04\28\02\00\0b\86\80\80\80\00\00\23\04\40"
  "\00\0b\84\80\80\80\00\00\20\00\0b\86\80\80\80\00"
  "\00\23\04\10\22\0b\85\80\80\80\00\00\23\04\0f\0b"
  "\85\80\80\80\00\00\23\04\1a\0b\89\80\80\80\00\00"
  "\02\7f\23\04\0c\00\0b\0b\88\80\80\80\00\00\23\04"
  "\21\00\20\00\0b\86\80\80\80\00\00\23\04\22\00\0b"
  "\88\80\80\80\00\00\23\04\24\04\23\04\0b\85\80\80"
  "\80\00\00\23\04\45\0b\87\80\80\80\00\00\23\04\23"
  "\04\6c\0b\87\80\80\80\00\00\23\00\41\01\4b\0b"
)
(assert_return (invoke "get-a") (i32.const -2))
(assert_return (invoke "get-b") (i64.const -5))
(assert_return (invoke "get-x") (i32.const -12))
(assert_return (invoke "get-y") (i64.const -15))
(assert_return (invoke "get-1") (f32.const -3))
(assert_return (invoke "get-2") (f64.const -4))
(assert_return (invoke "get-5") (f32.const -13))
(assert_return (invoke "get-6") (f64.const -14))
(assert_return (invoke "set-x" (i32.const 6)))
(assert_return (invoke "set-y" (i64.const 7)))
(assert_return (invoke "set-5" (f32.const 8)))
(assert_return (invoke "set-6" (f64.const 9)))
(assert_return (invoke "get-x") (i32.const 6))
(assert_return (invoke "get-y") (i64.const 7))
(assert_return (invoke "get-5") (f32.const 8))
(assert_return (invoke "get-6") (f64.const 9))
(assert_return (invoke "as-select-first") (i32.const 6))
(assert_return (invoke "as-select-mid") (i32.const 2))
(assert_return (invoke "as-select-last") (i32.const 2))
(assert_return (invoke "as-loop-first") (i32.const 6))
(assert_return (invoke "as-loop-mid") (i32.const 6))
(assert_return (invoke "as-loop-last") (i32.const 6))
(assert_return (invoke "as-if-condition") (i32.const 2))
(assert_return (invoke "as-if-then") (i32.const 6))
(assert_return (invoke "as-if-else") (i32.const 6))
(assert_return (invoke "as-br_if-first") (i32.const 6))
(assert_return (invoke "as-br_if-last") (i32.const 2))
(assert_return (invoke "as-br_table-first") (i32.const 6))
(assert_return (invoke "as-br_table-last") (i32.const 2))
(assert_return (invoke "as-call_indirect-first") (i32.const 6))
(assert_return (invoke "as-call_indirect-mid") (i32.const 2))
(assert_trap (invoke "as-call_indirect-last") "undefined element")
(assert_return (invoke "as-store-first"))
(assert_return (invoke "as-store-last"))
(assert_return (invoke "as-load-operand") (i32.const 1))
(assert_return (invoke "as-memory.grow-value") (i32.const 1))
(assert_return (invoke "as-call-value") (i32.const 6))
(assert_return (invoke "as-return-value") (i32.const 6))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (i32.const 6))
(assert_return (invoke "as-local.set-value" (i32.const 1)) (i32.const 6))
(assert_return (invoke "as-local.tee-value" (i32.const 1)) (i32.const 6))
(assert_return (invoke "as-global.set-value") (i32.const 6))
(assert_return (invoke "as-unary-operand") (i32.const 0))
(assert_return (invoke "as-binary-operand") (i32.const 36))
(assert_return (invoke "as-compare-operand") (i32.const 1))
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\89\80\80\80\00"
    "\01\7d\00\43\00\00\00\00\0b\0a\8f\80\80\80\00\01"
    "\89\80\80\80\00\00\43\00\00\80\3f\24\00\0b"
  )
  "global is immutable"
)
(module binary
  "\00\61\73\6d\01\00\00\00\06\89\80\80\80\00\01\7d"
  "\01\43\00\00\00\00\0b\07\85\80\80\80\00\01\01\61"
  "\03\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\06\89\80\80\80\00\01\7d"
  "\01\43\00\00\00\00\0b\07\85\80\80\80\00\01\01\61"
  "\03\00"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\8a\80\80\80\00\01\7d"
    "\00\43\00\00\00\00\8c\0b"
  )
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\86\80\80\80\00\01\7d"
    "\00\20\00\0b"
  )
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\8a\80\80\80\00\01\7d"
    "\00\43\00\00\80\3f\8c\0b"
  )
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\87\80\80\80\00\01\7f"
    "\00\41\00\01\0b"
  )
  "constant expression required"
)
(assert_invalid
  (module binary "\00\61\73\6d\01\00\00\00\06\85\80\80\80\00\01\7f" "\00\01\0b")
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\89\80\80\80\00\01\7f"
    "\00\43\00\00\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\88\80\80\80\00\01\7f"
    "\00\41\00\41\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary "\00\61\73\6d\01\00\00\00\06\84\80\80\80\00\01\7f" "\00\0b")
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\86\80\80\80\00\01\7f"
    "\00\23\00\0b"
  )
  "unknown global"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\06\8b\80\80\80\00\02\7f"
    "\00\23\01\0b\7f\00\41\00\0b"
  )
  "unknown global"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\98\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00"
)
(assert_malformed
  (module binary
    "\00\61\73\6d\01\00\00\00\02\98\80\80\80\00\01\08"
    "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
    "\69\33\32\03\7f\02"
  )
  "invalid mutability"
)
(assert_malformed
  (module binary
    "\00\61\73\6d\01\00\00\00\02\98\80\80\80\00\01\08"
    "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
    "\69\33\32\03\7f\ff"
  )
  "invalid mutability"
)
(module binary
  "\00\61\73\6d\01\00\00\00\06\86\80\80\80\00\01\7f"
  "\00\41\00\0b"
)
(assert_malformed
  (module binary
    "\00\61\73\6d\01\00\00\00\06\86\80\80\80\00\01\7f"
    "\02\41\00\0b"
  )
  "invalid mutability"
)
(assert_malformed
  (module binary
    "\00\61\73\6d\01\00\00\00\06\86\80\80\80\00\01\7f"
    "\ff\41\00\0b"
  )
  "invalid mutability"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\8a\80\80\80\00\01\84\80\80"
    "\80\00\00\24\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\8f\80\80\80\00\01\89\80\80"
    "\80\00\00\41\00\02\40\24\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\8f\80\80\80\00\01\89\80\80"
    "\80\00\00\41\00\03\40\24\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\91\80\80\80\00\01\8b\80\80"
    "\80\00\00\41\00\41\00\04\40\24\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\94\80\80\80\00\01\8e\80\80"
    "\80\00\00\41\00\41\00\04\7f\41\00\05\24\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\91\80\80\80\00\01\8b\80\80"
    "\80\00\00\41\00\02\40\24\00\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\91\80\80\80\00\01\8b\80\80"
    "\80\00\00\41\00\02\40\24\00\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\92\80\80\80\00\01\8c\80\80"
    "\80\00\00\41\00\02\40\24\00\0e\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\8b\80\80\80\00\01\85\80\80"
    "\80\00\00\24\00\0f\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\06\86\80\80\80\00"
    "\01\7f\01\41\00\0b\0a\8f\80\80\80\00\01\89\80\80"
    "\80\00\00\24\00\41\01\41\02\1b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
    "\00\00\60\01\7f\01\7f\03\83\80\80\80\00\02\00\01"
    "\06\86\80\80\80\00\01\7f\01\41\00\0b\0a\95\80\80"
    "\80\00\02\86\80\80\80\00\00\24\00\10\01\0b\84\80"
    "\80\80\00\00\20\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
    "\01\7f\01\7f\60\00\00\03\83\80\80\80\00\02\00\01"
    "\04\85\80\80\80\00\01\70\01\01\01\06\86\80\80\80"
    "\00\01\7f\01\41\00\0b\09\87\80\80\80\00\01\00\41"
    "\00\0b\01\00\0a\9b\80\80\80\00\02\84\80\80\80\00"
    "\00\20\00\0b\8c\80\80\80\00\00\02\7f\24\00\41\00"
    "\11\00\00\0b\0b"
  )
  "type mismatch"
)
