(module binary
  "\00\61\73\6d\01\00\00\00\01\93\80\80\80\00\04\60"
  "\02\7f\7f\01\7f\60\00\00\60\00\01\7f\60\01\7f\01"
  "\7f\03\ad\80\80\80\00\2c\01\01\02\02\02\02\02\02"
  "\02\02\02\02\01\02\02\02\02\02\02\00\02\02\02\01"
  "\01\02\03\02\02\01\02\02\02\02\02\02\02\02\02\02"
  "\02\02\02\02\04\85\80\80\80\00\01\70\01\01\01\05"
  "\83\80\80\80\00\01\00\01\06\86\80\80\80\00\01\7f"
  "\01\41\0a\0b\07\a6\85\80\80\00\29\05\65\6d\70\74"
  "\79\00\01\08\73\69\6e\67\75\6c\61\72\00\02\05\6d"
  "\75\6c\74\69\00\03\06\6e\65\73\74\65\64\00\04\04"
  "\64\65\65\70\00\05\0f\61\73\2d\73\65\6c\65\63\74"
  "\2d\66\69\72\73\74\00\06\0d\61\73\2d\73\65\6c\65"
  "\63\74\2d\6d\69\64\00\07\0e\61\73\2d\73\65\6c\65"
  "\63\74\2d\6c\61\73\74\00\08\0d\61\73\2d\6c\6f\6f"
  "\70\2d\66\69\72\73\74\00\09\0b\61\73\2d\6c\6f\6f"
  "\70\2d\6d\69\64\00\0a\0c\61\73\2d\6c\6f\6f\70\2d"
  "\6c\61\73\74\00\0b\0f\61\73\2d\69\66\2d\63\6f\6e"
  "\64\69\74\69\6f\6e\00\0c\0a\61\73\2d\69\66\2d\74"
  "\68\65\6e\00\0d\0a\61\73\2d\69\66\2d\65\6c\73\65"
  "\00\0e\0e\61\73\2d\62\72\5f\69\66\2d\66\69\72\73"
  "\74\00\0f\0d\61\73\2d\62\72\5f\69\66\2d\6c\61\73"
  "\74\00\10\11\61\73\2d\62\72\5f\74\61\62\6c\65\2d"
  "\66\69\72\73\74\00\11\10\61\73\2d\62\72\5f\74\61"
  "\62\6c\65\2d\6c\61\73\74\00\12\16\61\73\2d\63\61"
  "\6c\6c\5f\69\6e\64\69\72\65\63\74\2d\66\69\72\73"
  "\74\00\14\14\61\73\2d\63\61\6c\6c\5f\69\6e\64\69"
  "\72\65\63\74\2d\6d\69\64\00\15\15\61\73\2d\63\61"
  "\6c\6c\5f\69\6e\64\69\72\65\63\74\2d\6c\61\73\74"
  "\00\16\0e\61\73\2d\73\74\6f\72\65\2d\66\69\72\73"
  "\74\00\17\0d\61\73\2d\73\74\6f\72\65\2d\6c\61\73"
  "\74\00\18\14\61\73\2d\6d\65\6d\6f\72\79\2e\67\72"
  "\6f\77\2d\76\61\6c\75\65\00\19\0d\61\73\2d\63\61"
  "\6c\6c\2d\76\61\6c\75\65\00\1b\0f\61\73\2d\72\65"
  "\74\75\72\6e\2d\76\61\6c\75\65\00\1c\0f\61\73\2d"
  "\64\72\6f\70\2d\6f\70\65\72\61\6e\64\00\1d\0b\61"
  "\73\2d\62\72\2d\76\61\6c\75\65\00\1e\12\61\73\2d"
  "\6c\6f\63\61\6c\2e\73\65\74\2d\76\61\6c\75\65\00"
  "\1f\12\61\73\2d\6c\6f\63\61\6c\2e\74\65\65\2d\76"
  "\61\6c\75\65\00\20\13\61\73\2d\67\6c\6f\62\61\6c"
  "\2e\73\65\74\2d\76\61\6c\75\65\00\21\0f\61\73\2d"
  "\6c\6f\61\64\2d\6f\70\65\72\61\6e\64\00\22\10\61"
  "\73\2d\75\6e\61\72\79\2d\6f\70\65\72\61\6e\64\00"
  "\23\11\61\73\2d\62\69\6e\61\72\79\2d\6f\70\65\72"
  "\61\6e\64\00\24\0f\61\73\2d\74\65\73\74\2d\6f\70"
  "\65\72\61\6e\64\00\25\12\61\73\2d\63\6f\6d\70\61"
  "\72\65\2d\6f\70\65\72\61\6e\64\00\26\0a\62\72\65"
  "\61\6b\2d\62\61\72\65\00\27\0b\62\72\65\61\6b\2d"
  "\76\61\6c\75\65\00\28\0e\62\72\65\61\6b\2d\72\65"
  "\70\65\61\74\65\64\00\29\0b\62\72\65\61\6b\2d\69"
  "\6e\6e\65\72\00\2a\07\65\66\66\65\63\74\73\00\2b"
  "\09\87\80\80\80\00\01\00\41\00\0b\01\13\0a\8c\88"
  "\80\80\00\2c\82\80\80\80\00\00\0b\88\80\80\80\00"
  "\00\02\40\0b\02\40\0b\0b\8b\80\80\80\00\00\02\40"
  "\01\0b\02\7f\41\07\0b\0b\98\80\80\80\00\00\02\40"
  "\10\00\10\00\10\00\10\00\0b\02\7f\10\00\10\00\10"
  "\00\41\08\0b\0b\95\80\80\80\00\00\02\7f\02\40\10"
  "\00\02\40\0b\01\0b\02\7f\10\00\41\09\0b\0b\0b\f9"
  "\80\80\80\00\00\02\7f\02\7f\02\7f\02\7f\02\7f\02"
  "\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02"
  "\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02"
  "\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02"
  "\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02"
  "\7f\10\00\41\96\01\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b"
  "\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b"
  "\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\8c\80\80"
  "\80\00\00\02\7f\41\01\0b\41\02\41\03\1b\0b\8c\80"
  "\80\80\00\00\41\02\02\7f\41\01\0b\41\03\1b\0b\8c"
  "\80\80\80\00\00\41\02\41\03\02\7f\41\01\0b\1b\0b"
  "\8e\80\80\80\00\00\03\7f\02\7f\41\01\0b\10\00\10"
  "\00\0b\0b\8e\80\80\80\00\00\03\7f\10\00\02\7f\41"
  "\01\0b\10\00\0b\0b\8e\80\80\80\00\00\03\7f\10\00"
  "\10\00\02\7f\41\01\0b\0b\0b\8c\80\80\80\00\00\02"
  "\7f\41\01\0b\04\40\10\00\0b\0b\8f\80\80\80\00\00"
  "\41\01\04\7f\02\7f\41\01\0b\05\41\02\0b\0b\8f\80"
  "\80\80\00\00\41\01\04\7f\41\02\05\02\7f\41\01\0b"
  "\0b\0b\8e\80\80\80\00\00\02\7f\02\7f\41\01\0b\41"
  "\02\0d\00\0b\0b\8e\80\80\80\00\00\02\7f\41\02\02"
  "\7f\41\01\0b\0d\00\0b\0b\90\80\80\80\00\00\02\7f"
  "\02\7f\41\01\0b\41\02\0e\01\00\00\0b\0b\90\80\80"
  "\80\00\00\02\7f\41\02\02\7f\41\01\0b\0e\01\00\00"
  "\0b\0b\84\80\80\80\00\00\20\00\0b\91\80\80\80\00"
  "\00\02\7f\02\7f\41\01\0b\41\02\41\00\11\00\00\0b"
  "\0b\91\80\80\80\00\00\02\7f\41\02\02\7f\41\01\0b"
  "\41\00\11\00\00\0b\0b\91\80\80\80\00\00\02\7f\41"
  "\01\41\02\02\7f\41\00\0b\11\00\00\0b\0b\8c\80\80"
  "\80\00\00\02\7f\41\01\0b\41\01\36\02\00\0b\8c\80"
  "\80\80\00\00\41\0a\02\7f\41\01\0b\36\02\00\0b\89"
  "\80\80\80\00\00\02\7f\41\01\0b\40\00\0b\84\80\80"
  "\80\00\00\20\00\0b\89\80\80\80\00\00\02\7f\41\01"
  "\0b\10\1a\0b\88\80\80\80\00\00\02\7f\41\01\0b\0f"
  "\0b\88\80\80\80\00\00\02\7f\41\01\0b\1a\0b\8c\80"
  "\80\80\00\00\02\7f\02\7f\41\01\0b\0c\00\0b\0b\8d"
  "\80\80\80\00\01\01\7f\02\7f\41\01\0b\21\00\20\00"
  "\0b\8b\80\80\80\00\01\01\7f\02\7f\41\01\0b\22\00"
  "\0b\8b\80\80\80\00\00\02\7f\41\01\0b\24\00\23\00"
  "\0b\8a\80\80\80\00\00\02\7f\41\01\0b\28\02\00\0b"
  "\8a\80\80\80\00\00\02\7f\10\00\41\0d\0b\68\0b\91"
  "\80\80\80\00\00\02\7f\10\00\41\03\0b\02\7f\10\00"
  "\41\04\0b\6c\0b\8a\80\80\80\00\00\02\7f\10\00\41"
  "\0d\0b\45\0b\97\80\80\80\00\00\02\7d\10\00\43\00"
  "\00\40\40\0b\02\7d\10\00\43\00\00\40\40\0b\5e\0b"
  "\a6\80\80\80\00\00\02\40\0c\00\00\0b\02\40\41\01"
  "\0d\00\00\0b\02\40\41\00\0e\00\00\00\0b\02\40\41"
  "\01\0e\02\00\00\00\00\0b\41\13\0b\8b\80\80\80\00"
  "\00\02\7f\41\12\0c\00\41\13\0b\0b\b1\80\80\80\00"
  "\00\02\7f\41\12\0c\00\41\13\0c\00\41\14\41\00\0d"
  "\00\1a\41\14\41\01\0d\00\1a\41\15\0c\00\41\16\41"
  "\04\0e\00\00\41\17\41\01\0e\02\00\00\00\41\15\0b"
  "\0b\c5\80\80\80\00\01\01\7f\41\00\21\00\20\00\02"
  "\7f\02\7f\41\01\0c\01\0b\0b\6a\21\00\20\00\02\7f"
  "\02\40\0c\00\0b\41\02\0b\6a\21\00\20\00\02\7f\41"
  "\04\0c\00\68\0b\6a\21\00\20\00\02\7f\02\7f\41\08"
  "\0c\01\0b\68\0b\6a\21\00\20\00\0b\af\80\80\80\00"
  "\01\01\7f\02\40\41\01\21\00\20\00\41\03\6c\21\00"
  "\20\00\41\05\6b\21\00\20\00\41\07\6c\21\00\0c\00"
  "\20\00\41\e4\00\6c\21\00\0b\20\00\41\72\46\0b"
)
(assert_return (invoke "empty"))
(assert_return (invoke "singular") (i32.const 7))
(assert_return (invoke "multi") (i32.const 8))
(assert_return (invoke "nested") (i32.const 9))
(assert_return (invoke "deep") (i32.const 150))
(assert_return (invoke "as-select-first") (i32.const 1))
(assert_return (invoke "as-select-mid") (i32.const 2))
(assert_return (invoke "as-select-last") (i32.const 2))
(assert_return (invoke "as-loop-first") (i32.const 1))
(assert_return (invoke "as-loop-mid") (i32.const 1))
(assert_return (invoke "as-loop-last") (i32.const 1))
(assert_return (invoke "as-if-condition"))
(assert_return (invoke "as-if-then") (i32.const 1))
(assert_return (invoke "as-if-else") (i32.const 2))
(assert_return (invoke "as-br_if-first") (i32.const 1))
(assert_return (invoke "as-br_if-last") (i32.const 2))
(assert_return (invoke "as-br_table-first") (i32.const 1))
(assert_return (invoke "as-br_table-last") (i32.const 2))
(assert_return (invoke "as-call_indirect-first") (i32.const 1))
(assert_return (invoke "as-call_indirect-mid") (i32.const 2))
(assert_return (invoke "as-call_indirect-last") (i32.const 1))
(assert_return (invoke "as-store-first"))
(assert_return (invoke "as-store-last"))
(assert_return (invoke "as-memory.grow-value") (i32.const 1))
(assert_return (invoke "as-call-value") (i32.const 1))
(assert_return (invoke "as-return-value") (i32.const 1))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (i32.const 1))
(assert_return (invoke "as-local.set-value") (i32.const 1))
(assert_return (invoke "as-local.tee-value") (i32.const 1))
(assert_return (invoke "as-global.set-value") (i32.const 1))
(assert_return (invoke "as-load-operand") (i32.const 1))
(assert_return (invoke "as-unary-operand") (i32.const 0))
(assert_return (invoke "as-binary-operand") (i32.const 12))
(assert_return (invoke "as-test-operand") (i32.const 0))
(assert_return (invoke "as-compare-operand") (i32.const 0))
(assert_return (invoke "break-bare") (i32.const 19))
(assert_return (invoke "break-value") (i32.const 18))
(assert_return (invoke "break-repeated") (i32.const 18))
(assert_return (invoke "break-inner") (i32.const 15))
(assert_return (invoke "effects") (i32.const 1))
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\40\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\40\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\40\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\40\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8d\80\80\80\00"
    "\01\87\80\80\80\00\00\02\40\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8d\80\80\80\00"
    "\01\87\80\80\80\00\00\02\40\42\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\43\00\00\80\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\94\80\80\80\00"
    "\01\8e\80\80\80\00\00\02\40\44\00\00\00\00\00\00"
    "\f0\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\7f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\7e\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\7d\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\02\7c\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\00\41\00\02\40\02\7f\0b\1a\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\00\41\00\03\40\02\7f\0b\1a\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\93\80\80\80\00"
    "\01\8d\80\80\80\00\00\41\00\41\00\04\40\02\7f\0b"
    "\1a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8c\80\80\80"
    "\00\01\86\80\80\80\00\00\02\7f\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8c\80\80\80"
    "\00\01\86\80\80\80\00\00\02\7e\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8c\80\80\80"
    "\00\01\86\80\80\80\00\00\02\7d\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8c\80\80\80"
    "\00\01\86\80\80\80\00\00\02\7c\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7f\42\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\7f\43\00\00\00\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7f\44\00\00\00\00\00"
    "\00\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7e\41\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\7e\43\00\00\00\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7e\44\00\00\00\00\00"
    "\00\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7d\41\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7d\42\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7d\44\00\00\00\00\00"
    "\00\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7c\41\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7c\42\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\7c\43\00\00\00\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7e\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7d\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7c\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7f\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7d\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7c\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7f\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7e\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7c\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7f\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7e\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7d\00\00\00\1b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7e\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7d\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\02\7c\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7f\0c\00\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\7e\0c\00\42\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\02\7d\0c\00\43\00\00\80"
    "\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7c\0c\00\44\00\00\00"
    "\00\00\00\f0\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\7f\01\0c\00\41\01\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\7e\01\0c\00\42\01\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\7d\01\0c\00\43\00\00"
    "\80\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\97\80\80\80"
    "\00\01\91\80\80\80\00\00\02\7c\01\0c\00\44\00\00"
    "\00\00\00\00\f0\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\02\7f\42\01\0c\00\41\01"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7f\43\00\00\80\3f\0c"
    "\00\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\98\80\80\80"
    "\00\01\92\80\80\80\00\00\02\7f\44\00\00\00\00\00"
    "\00\f0\3f\0c\00\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\02\7e\41\01\0c\00\42\01"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7e\43\00\00\80\3f\0c"
    "\00\42\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\98\80\80\80"
    "\00\01\92\80\80\80\00\00\02\7e\44\00\00\00\00\00"
    "\00\f0\3f\0c\00\42\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7d\41\01\0c\00\43\00"
    "\00\80\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7d\42\01\0c\00\43\00"
    "\00\80\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\9b\80\80\80"
    "\00\01\95\80\80\80\00\00\02\7d\44\00\00\00\00\00"
    "\00\f0\3f\0c\00\43\00\00\80\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\98\80\80\80"
    "\00\01\92\80\80\80\00\00\02\7e\41\01\0c\00\44\00"
    "\00\00\00\00\00\f0\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\98\80\80\80"
    "\00\01\92\80\80\80\00\00\02\7c\42\01\0c\00\44\00"
    "\00\00\00\00\00\f0\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9b\80\80\80"
    "\00\01\95\80\80\80\00\00\02\7c\43\00\00\80\3f\0c"
    "\00\44\00\00\00\00\00\00\f0\3f\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\02\7f\01\0c\00\41\01\0c"
    "\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\02\7e\01\0c\00\42\01\0c"
    "\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\95\80\80\80"
    "\00\01\8f\80\80\80\00\00\02\7d\01\0c\00\43\00\00"
    "\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\99\80\80\80"
    "\00\01\93\80\80\80\00\00\02\7c\01\0c\00\44\00\00"
    "\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\7f\42\01\0c\00\41\01"
    "\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7f\43\00\00\80\3f\0c"
    "\00\41\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\9a\80\80\80"
    "\00\01\94\80\80\80\00\00\02\7f\44\00\00\00\00\00"
    "\00\f0\3f\0c\00\41\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\7e\41\01\0c\00\42\01"
    "\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7e\43\00\00\80\3f\0c"
    "\00\42\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\9a\80\80\80"
    "\00\01\94\80\80\80\00\00\02\7e\44\00\00\00\00\00"
    "\00\f0\3f\0c\00\42\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7d\41\01\0c\00\43\00"
    "\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7d\42\01\0c\00\43\00"
    "\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\9d\80\80\80"
    "\00\01\97\80\80\80\00\00\02\7d\44\00\00\00\00\00"
    "\00\f0\3f\0c\00\43\00\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9a\80\80\80"
    "\00\01\94\80\80\80\00\00\02\7c\41\01\0c\00\44\00"
    "\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9a\80\80\80"
    "\00\01\94\80\80\80\00\00\02\7c\42\01\0c\00\44\00"
    "\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9d\80\80\80"
    "\00\01\97\80\80\80\00\00\02\7c\43\00\00\80\3f\0c"
    "\00\44\00\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\94\80\80\80\00"
    "\01\8e\80\80\80\00\00\02\7f\02\7f\41\01\0c\01\0b"
    "\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\94\80\80\80\00"
    "\01\8e\80\80\80\00\00\02\7e\02\7e\42\01\0c\01\0b"
    "\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\97\80\80\80\00"
    "\01\91\80\80\80\00\00\02\7d\02\7d\43\00\00\80\3f"
    "\0c\01\0b\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
    "\01\95\80\80\80\00\00\02\7c\02\7c\44\00\00\00\00"
    "\00\00\f0\3f\0c\01\0b\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7f\02\40\0c\01\0b\41"
    "\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7e\02\40\0c\01\0b\42"
    "\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\97\80\80\80"
    "\00\01\91\80\80\80\00\00\02\7d\02\40\0c\01\0b\43"
    "\00\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9b\80\80\80"
    "\00\01\95\80\80\80\00\00\02\7c\02\40\0c\01\0b\44"
    "\00\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\95\80\80\80"
    "\00\01\8f\80\80\80\00\00\02\7f\02\7f\01\0c\01\0b"
    "\41\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\95\80\80\80"
    "\00\01\8f\80\80\80\00\00\02\7e\02\7e\01\0c\01\0b"
    "\42\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\98\80\80\80"
    "\00\01\92\80\80\80\00\00\02\7d\02\7d\01\0c\01\0b"
    "\43\00\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9c\80\80\80"
    "\00\01\96\80\80\80\00\00\02\7c\02\7c\01\0c\01\0b"
    "\44\00\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7f\02\7f\42\01\0c\01"
    "\0b\41\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\99\80\80\80"
    "\00\01\93\80\80\80\00\00\02\7f\02\7f\43\00\00\80"
    "\3f\0c\01\0b\41\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\9d\80\80\80"
    "\00\01\97\80\80\80\00\00\02\7f\02\7f\44\00\00\00"
    "\00\00\00\f0\3f\0c\01\0b\41\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\96\80\80\80"
    "\00\01\90\80\80\80\00\00\02\7e\02\7e\41\01\0c\01"
    "\0b\42\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\99\80\80\80"
    "\00\01\93\80\80\80\00\00\02\7e\02\7e\43\00\00\80"
    "\3f\0c\01\0b\42\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\9d\80\80\80"
    "\00\01\97\80\80\80\00\00\02\7e\02\7e\44\00\00\00"
    "\00\00\00\f0\3f\0c\01\0b\42\01\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\99\80\80\80"
    "\00\01\93\80\80\80\00\00\02\7d\02\7d\41\01\0c\01"
    "\0b\43\00\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\99\80\80\80"
    "\00\01\93\80\80\80\00\00\02\7d\02\7d\42\01\0c\01"
    "\0b\43\00\00\80\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\a0\80\80\80"
    "\00\01\9a\80\80\80\00\00\02\7d\02\7d\44\00\00\00"
    "\00\00\00\f0\3f\0c\01\0b\43\00\00\80\3f\0c\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9d\80\80\80"
    "\00\01\97\80\80\80\00\00\02\7c\02\7c\41\01\0c\01"
    "\0b\44\00\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\9d\80\80\80"
    "\00\01\97\80\80\80\00\00\02\7c\02\7c\42\01\0c\01"
    "\0b\44\00\00\00\00\00\00\f0\3f\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\a0\80\80\80"
    "\00\01\9a\80\80\80\00\00\02\7c\02\7c\43\00\00\80"
    "\3f\0c\01\0b\44\00\00\00\00\00\00\f0\3f\0c\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\00\02\40\0c\00\0b\68\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\00\02\40\0c\00\0b\7a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\00\02\40\0c\00\0b\8e\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\00\02\40\0c\00\0b\9c\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\40\01\0c\00\0b\68\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\40\01\0c\00\0b\7a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\40\01\0c\00\0b\8e\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\02\40\01\0c\00\0b\9c\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\40\42\09\0c\00\0b\7a"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\40\43\00\00\10\41\0c"
    "\00\0b\8e\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\97\80\80\80"
    "\00\01\91\80\80\80\00\00\02\40\44\00\00\00\00\00"
    "\00\22\40\0c\00\0b\9c\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\40\41\09\0c\00\0b\68"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\40\43\00\00\10\41\0c"
    "\00\0b\8e\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\97\80\80\80"
    "\00\01\91\80\80\80\00\00\02\40\44\00\00\00\00\00"
    "\00\22\40\0c\00\0b\9c\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\40\41\09\0c\00\0b\68"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\40\42\09\0c\00\0b\7a"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7d\03\82\80\80\80\00\01\00\0a\97\80\80\80"
    "\00\01\91\80\80\80\00\00\02\40\44\00\00\00\00\00"
    "\00\22\40\0c\00\0b\9c\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\40\41\09\0c\00\0b\68"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\02\40\42\09\0c\00\0b\7a"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7c\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\40\43\00\00\10\41\0c"
    "\00\0b\8e\0b"
  )
  "type mismatch"
)
(assert_malformed (module quote "(func block end $l)") "mismatching label")
(assert_malformed (module quote "(func block $a end $l)") "mismatching label")
