(module binary
  "\00\61\73\6d\01\00\00\00\01\a5\80\80\80\00\07\60"
  "\00\00\60\01\7f\00\60\01\7e\00\60\01\7d\00\60\01"
  "\7c\00\60\05\7e\7d\7c\7f\7f\00\60\05\7e\7d\7c\7f"
  "\7f\01\7e\03\94\80\80\80\00\13\00\00\00\00\01\02"
  "\03\04\05\06\01\01\01\01\01\01\01\01\01\07\b4\82"
  "\80\80\00\13\0e\74\79\70\65\2d\6c\6f\63\61\6c\2d"
  "\69\33\32\00\00\0e\74\79\70\65\2d\6c\6f\63\61\6c"
  "\2d\69\36\34\00\01\0e\74\79\70\65\2d\6c\6f\63\61"
  "\6c\2d\66\33\32\00\02\0e\74\79\70\65\2d\6c\6f\63"
  "\61\6c\2d\66\36\34\00\03\0e\74\79\70\65\2d\70\61"
  "\72\61\6d\2d\69\33\32\00\04\0e\74\79\70\65\2d\70"
  "\61\72\61\6d\2d\69\36\34\00\05\0e\74\79\70\65\2d"
  "\70\61\72\61\6d\2d\66\33\32\00\06\0e\74\79\70\65"
  "\2d\70\61\72\61\6d\2d\66\36\34\00\07\0a\74\79\70"
  "\65\2d\6d\69\78\65\64\00\08\05\77\72\69\74\65\00"
  "\09\0e\61\73\2d\62\6c\6f\63\6b\2d\76\61\6c\75\65"
  "\00\0a\0d\61\73\2d\6c\6f\6f\70\2d\76\61\6c\75\65"
  "\00\0b\0b\61\73\2d\62\72\2d\76\61\6c\75\65\00\0c"
  "\0e\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65\00"
  "\0d\13\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65"
  "\2d\63\6f\6e\64\00\0e\11\61\73\2d\62\72\5f\74\61"
  "\62\6c\65\2d\76\61\6c\75\65\00\0f\0f\61\73\2d\72"
  "\65\74\75\72\6e\2d\76\61\6c\75\65\00\10\0a\61\73"
  "\2d\69\66\2d\74\68\65\6e\00\11\0a\61\73\2d\69\66"
  "\2d\65\6c\73\65\00\12\0a\9e\83\80\80\00\13\88\80"
  "\80\80\00\01\01\7f\41\00\21\00\0b\88\80\80\80\00"
  "\01\01\7e\42\00\21\00\0b\8b\80\80\80\00\01\01\7d"
  "\43\00\00\00\00\21\00\0b\8f\80\80\80\00\01\01\7c"
  "\44\00\00\00\00\00\00\00\00\21\00\0b\86\80\80\80"
  "\00\00\41\0a\21\00\0b\86\80\80\80\00\00\42\0b\21"
  "\00\0b\89\80\80\80\00\00\43\9a\99\31\41\21\00\0b"
  "\8d\80\80\80\00\00\44\66\66\66\66\66\66\28\40\21"
  "\00\0b\c0\80\80\80\00\03\01\7d\02\7e\01\7c\42\00"
  "\21\00\43\00\00\00\00\21\01\44\00\00\00\00\00\00"
  "\00\00\21\02\41\00\21\03\41\00\21\04\43\00\00\00"
  "\00\21\05\42\00\21\06\42\00\21\07\44\00\00\00\00"
  "\00\00\00\00\21\08\0b\cf\80\80\80\00\03\01\7d\02"
  "\7e\01\7c\43\9a\99\99\be\21\01\41\28\21\03\41\79"
  "\21\04\43\00\00\b0\40\21\05\42\06\21\06\44\00\00"
  "\00\00\00\00\20\40\21\08\20\00\ba\20\01\bb\20\02"
  "\20\03\b8\20\04\b7\20\05\bb\20\06\ba\20\07\ba\20"
  "\08\a0\a0\a0\a0\a0\a0\a0\a0\b0\0b\89\80\80\80\00"
  "\00\02\40\41\01\21\00\0b\0b\89\80\80\80\00\00\03"
  "\40\41\03\21\00\0b\0b\8b\80\80\80\00\00\02\40\41"
  "\09\21\00\0c\00\0b\0b\8d\80\80\80\00\00\02\40\41"
  "\08\21\00\41\01\0d\00\0b\0b\8d\80\80\80\00\00\02"
  "\40\41\06\41\09\21\00\0d\00\0b\0b\8e\80\80\80\00"
  "\00\02\40\41\0a\21\00\41\01\0e\00\00\0b\0b\87\80"
  "\80\80\00\00\41\07\21\00\0f\0b\8b\80\80\80\00\00"
  "\20\00\04\40\41\03\21\00\0b\0b\8c\80\80\80\00\00"
  "\20\00\04\40\05\41\01\21\00\0b\0b"
)
(assert_return (invoke "type-local-i32"))
(assert_return (invoke "type-local-i64"))
(assert_return (invoke "type-local-f32"))
(assert_return (invoke "type-local-f64"))
(assert_return (invoke "type-param-i32" (i32.const 2)))
(assert_return (invoke "type-param-i64" (i64.const 3)))
(assert_return (invoke "type-param-f32" (f32.const 4.400_000_095_367_431_6)))
(assert_return (invoke "type-param-f64" (f64.const 5.5)))
(assert_return (invoke "as-block-value" (i32.const 0)))
(assert_return (invoke "as-loop-value" (i32.const 0)))
(assert_return (invoke "as-br-value" (i32.const 0)))
(assert_return (invoke "as-br_if-value" (i32.const 0)))
(assert_return (invoke "as-br_if-value-cond" (i32.const 0)))
(assert_return (invoke "as-br_table-value" (i32.const 0)))
(assert_return (invoke "as-return-value" (i32.const 0)))
(assert_return (invoke "as-if-then" (i32.const 1)))
(assert_return (invoke "as-if-else" (i32.const 0)))
(assert_return
  (invoke "type-mixed"
    (i64.const 1)
    (f32.const 2.200_000_047_683_715_8)
    (f64.const 3.299_999_999_999_999_8)
    (i32.const 4)
    (i32.const 5)
  )
)
(assert_return
  (invoke "write"
    (i64.const 1)
    (f32.const 2)
    (f64.const 3.299_999_999_999_999_8)
    (i32.const 4)
    (i32.const 5)
  )
  (i64.const 56)
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8d\80\80\80\00"
    "\01\87\80\80\80\00\01\01\7f\01\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\01\01\7f\43\00\00\00\00\21\00"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\95\80\80\80\00"
    "\01\8f\80\80\80\00\01\01\7d\44\00\00\00\00\00\00"
    "\00\00\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\97\80\80\80\00"
    "\01\91\80\80\80\00\02\01\7c\01\7e\44\00\00\00\00"
    "\00\00\00\00\21\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\01\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\43\00\00\00\00\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7d\00\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\44\00\00\00\00\00\00\00"
    "\00\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7c\7e\00\03\82\80\80\80\00\01\00\0a\93\80\80"
    "\80\00\01\8d\80\80\80\00\00\44\00\00\00\00\00\00"
    "\00\00\21\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8a\80\80\80"
    "\00\01\84\80\80\80\00\00\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\41\00\02\40\21\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\41\00\03\40\21\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\41\00\41\01\04\40\21\00"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\41\00\41\00\04\7f\41\00"
    "\05\21\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\41\00\02\40\21\00\0c\00"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\41\00\02\40\21\00\0d\00"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\41\00\02\40\21\00\0e\00"
    "\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\21\00\0f\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\21\00\41\01\41\02\1b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
    "\01\7f\00\60\01\7f\01\7f\03\83\80\80\80\00\02\00"
    "\01\0a\95\80\80\80\00\02\86\80\80\80\00\00\21\00"
    "\10\01\0b\84\80\80\80\00\00\20\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
    "\01\7f\01\7f\60\01\7f\00\03\83\80\80\80\00\02\00"
    "\01\04\85\80\80\80\00\01\70\01\01\01\09\87\80\80"
    "\80\00\01\00\41\00\0b\01\00\0a\9b\80\80\80\00\02"
    "\84\80\80\80\00\00\20\00\0b\8c\80\80\80\00\00\02"
    "\7f\21\00\41\00\11\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7d\00\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\01\01\7f\43\00\00\00\00\21"
    "\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7e\7f\00\03\82\80\80\80\00\01\00\0a\91\80\80"
    "\80\00\01\8b\80\80\80\00\01\01\7d\43\00\00\00\00"
    "\21\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7e\00\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\02\01\7c\01\7e\42\00\21\01"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7f\01\7f\03\82\80\80\80\00\01\00\0a\8c\80\80"
    "\80\00\01\86\80\80\80\00\00\41\01\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7e\01\7e\03\82\80\80\80\00\01\00\0a\8c\80\80"
    "\80\00\01\86\80\80\80\00\00\42\01\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7d\01\7d\03\82\80\80\80\00\01\00\0a\8f\80\80"
    "\80\00\01\89\80\80\80\00\00\43\00\00\80\3f\21\00"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7c\01\7c\03\82\80\80\80\00\01\00\0a\93\80\80"
    "\80\00\01\8d\80\80\80\00\00\44\00\00\00\00\00\00"
    "\f0\3f\21\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\02\01\7f\01\7e\41\00\21\03\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\93\80\80\80\00"
    "\01\8d\80\80\80\00\02\01\7f\01\7e\41\00\21\f7\a4"
    "\ea\06\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7f\7e\00\03\82\80\80\80\00\01\00\0a\8c\80\80"
    "\80\00\01\86\80\80\80\00\00\41\00\21\02\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7f\7e\00\03\82\80\80\80\00\01\00\0a\90\80\80"
    "\80\00\01\8a\80\80\80\00\00\41\00\21\f7\f2\ce\d4"
    "\02\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\02\01\7f\01\7e\41\00\21\03"
    "\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7e\00\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\02\01\7f\01\7e\41\00\21\f7"
    "\a8\99\66\0b"
  )
  "unknown local"
)
