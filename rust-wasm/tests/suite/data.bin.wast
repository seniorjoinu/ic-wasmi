(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\01\0b\d2\80\80\80\00\0c\00\41\00\0b\00\00\41\01"
  "\0b\04\61\62\63\64\00\41\00\0b\00\00\41\00\0b\03"
  "\61\62\63\00\41\00\0b\00\00\41\01\0b\04\61\62\63"
  "\64\00\41\00\0b\00\00\41\00\0b\03\61\62\63\00\41"
  "\00\0b\00\00\41\01\0b\04\61\62\63\64\00\41\00\0b"
  "\00\00\41\00\0b\03\61\62\63"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\01\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\01\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\01\0b\a2\80\80\80\00\05\00\41\00\0b\01\61\00\41"
  "\03\0b\01\62\00\41\e4\00\0b\03\63\64\65\00\41\05"
  "\0b\01\78\00\41\03\0b\01\63"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\01\0b\a7\80\80\80\00\06\00\41\00\0b\01\61\00"
  "\41\01\0b\01\62\00\41\02\0b\03\63\64\65\00\41\03"
  "\0b\01\66\00\41\02\0b\01\67\00\41\01\0b\01\68"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\98\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00\05\83\80\80\80\00\01\00\01\0b"
  "\87\80\80\80\00\01\00\23\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\ab\80\80\80\00\02\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00\08\73\70\65\63\74\65\73\74\06"
  "\6d\65\6d\6f\72\79\02\00\01\0b\87\80\80\80\00\01"
  "\00\23\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\98\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00\05\83\80\80\80\00\01\00\01\0b"
  "\87\80\80\80\00\01\00\23\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\ab\80\80\80\00\02\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00\08\73\70\65\63\74\65\73\74\06"
  "\6d\65\6d\6f\72\79\02\00\01\0b\87\80\80\80\00\01"
  "\00\23\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\01\0b\8f\80\80\80\00\02\00\41\00\0b\01\61\00\41"
  "\ff\ff\03\0b\01\62"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\01\0b\8f\80\80\80\00\02\00\41\00\0b\01\61\00"
  "\41\ff\ff\03\0b\01\62"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\02\0b\89\80\80\80\00\01\00\41\ff\ff\07\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\00\0b\86\80\80\80\00\01\00\41\00\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\00\0b\86\80\80\80\00\01\00\41\00\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
  "\00\00\0b\86\80\80\80\00\01\00\41\00\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\01\0b\88\80\80\80\00\01\00\41\80\80\04\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
  "\00\0b\86\80\80\80\00\01\00\41\00\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\00\0b\86\80\80\80\00\01\00\41\00\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
  "\00\00\0b\86\80\80\80\00\01\00\41\00\0b\00"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\00\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\95\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\01\00\03\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\ab\80\80\80\00\02\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00\08\73\70\65\63\74\65\73\74\06"
  "\6d\65\6d\6f\72\79\02\00\00\0b\87\80\80\80\00\01"
  "\00\23\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\ac\80\80\80\00\02\08"
  "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
  "\69\33\32\03\7f\00\08\73\70\65\63\74\65\73\74\06"
  "\6d\65\6d\6f\72\79\02\01\00\03\0b\87\80\80\80\00"
  "\01\00\23\00\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\00\00\0b\87\80\80\80\00\01\00\41\01\0b\01\61"
)
(module binary
  "\00\61\73\6d\01\00\00\00\02\95\80\80\80\00\01\08"
  "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
  "\01\00\03\0b\87\80\80\80\00\01\00\41\01\0b\01\61"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\00\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
    "\00\00\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
    "\00\01\0b\87\80\80\80\00\01\00\41\00\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\00\0b\86\80\80\80\00\01\00\41\01\0b\00"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
    "\00\01\0b\86\80\80\80\00\01\00\41\01\0b\00"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\02\98\80\80\80\00\01\08"
    "\73\70\65\63\74\65\73\74\0a\67\6c\6f\62\61\6c\5f"
    "\69\33\32\03\7f\00\05\83\80\80\80\00\01\00\00\0b"
    "\87\80\80\80\00\01\00\23\00\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
    "\01\02\0b\89\80\80\80\00\01\00\41\80\80\04\0b\01"
    "\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
    "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
    "\00\01\0b\89\80\80\80\00\01\00\41\80\80\04\0b\01"
    "\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\02\0b\89\80\80\80\00\01\00\41\80\80\08\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\84\80\80\80\00\01\01"
    "\02\03\0b\89\80\80\80\00\01\00\41\80\80\08\0b\01"
    "\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\01\0b\87\80\80\80\00\01\00\41\7f\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
    "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
    "\00\01\0b\87\80\80\80\00\01\00\41\7f\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\02\0b\88\80\80\80\00\01\00\41\9c\7f\0b\01\61"
  )
  "data segment does not fit"
)
(assert_unlinkable
  (module binary
    "\00\61\73\6d\01\00\00\00\02\94\80\80\80\00\01\08"
    "\73\70\65\63\74\65\73\74\06\6d\65\6d\6f\72\79\02"
    "\00\01\0b\88\80\80\80\00\01\00\41\9c\7f\0b\01\61"
  )
  "data segment does not fit"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\0b\86\80\80\80\00\01\00"
    "\41\00\0b\00"
  )
  "unknown memory"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\01\0b\86\80\80\80\00\01\00\42\00\0b\00"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\01\0b\87\80\80\80\00\01\00\41\00\68\0b\00"
  )
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\01\0b\85\80\80\80\00\01\00\01\0b\00"
  )
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\01\0b\87\80\80\80\00\01\00\01\41\00\0b\00"
  )
  "constant expression required"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00"
    "\01\0b\87\80\80\80\00\01\00\41\00\01\0b\00"
  )
  "constant expression required"
)
