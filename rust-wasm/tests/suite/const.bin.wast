(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\41\95\9a\ef\3a\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80\00"
  "\01\89\80\80\80\00\00\41\df\f7\bf\d6\79\1a\0b"
)
(assert_malformed (module quote "(func (i32.const) drop)") "unexpected token")
(assert_malformed
  (module quote "(func (i32.const 0x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (i32.const 1x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (i32.const 0xg) drop)")
  "unknown operator"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\42\95\9a\ef\3a\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\93\80\80\80\00"
  "\01\8d\80\80\80\00\00\42\ef\f9\be\ef\9a\f1\d9\92"
  "\01\1a\0b"
)
(assert_malformed (module quote "(func (i64.const) drop)") "unexpected token")
(assert_malformed
  (module quote "(func (i64.const 0x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (i64.const 1x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (i64.const 0xg) drop)")
  "unknown operator"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\a3\79\eb\4c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\2f\59\2d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\a3\79\eb\4c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\2f\59\2d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\a3\79\eb\4c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\2f\59\2d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\91\5b\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\52\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\91\5b\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\52\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\91\5b\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\b4\a2\11\52\1a\0b"
)
(assert_malformed (module quote "(func (f32.const) drop)") "unexpected token")
(assert_malformed
  (module quote "(func (f32.const .0) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const .0e0) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0e) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0e+) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0.0e) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0.0e-) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 1x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0xg) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x.) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0.g) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0p) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0p+) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0p-) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0.0p) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0.0p+) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0.0p-) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const 0x0pA) drop)")
  "unknown operator"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\00\00\00\54\34\6f\9d\41"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\fa\16\5e\5b\af\e9\8f\45"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\fa\16\5e\5b\af\e9\8f\45"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\11\43\2b\d6\ff\25\ab\3d"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\00\00\00\54\34\6f\9d\41"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\fa\16\5e\5b\af\e9\8f\45"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\fa\16\5e\5b\af\e9\8f\45"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\11\43\2b\d6\ff\25\ab\3d"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\58\a4\0c\54\34\6f\9d\41"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\d5\cb\6b\5b\af\e9\8f\45"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\d5\cb\6b\5b\af\e9\8f\45"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\12\ec\36\d6\ff\25\ab\3d"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\f2\44"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\22\46"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\22\46"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\c2\43"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\f2\44"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\22\46"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\22\46"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\c2\43"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\f2\44"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\22\46"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\22\46"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\df\bc\9a\78\56\34\c2\43"
  "\1a\0b"
)
(assert_malformed (module quote "(func (f64.const) drop)") "unexpected token")
(assert_malformed
  (module quote "(func (f64.const .0) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const .0e0) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0e) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0e+) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0.0e) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0.0e-) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 1x) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0xg) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x.) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0.g) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0p) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0p+) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0p-) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0.0p) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0.0p+) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0.0p-) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const 0x0pA) drop)")
  "unknown operator"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80\00"
  "\01\85\80\80\80\00\00\41\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80\00"
  "\01\89\80\80\80\00\00\41\80\80\80\80\78\1a\0b"
)
(assert_malformed
  (module quote "(func (i32.const 0x100000000) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (i32.const -0x80000001) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80\00"
  "\01\85\80\80\80\00\00\41\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80\00"
  "\01\89\80\80\80\00\00\41\80\80\80\80\78\1a\0b"
)
(assert_malformed
  (module quote "(func (i32.const 4294967296) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (i32.const -2147483649) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80\00"
  "\01\85\80\80\80\00\00\42\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\94\80\80\80\00"
  "\01\8e\80\80\80\00\00\42\80\80\80\80\80\80\80\80"
  "\80\7f\1a\0b"
)
(assert_malformed
  (module quote "(func (i64.const 0x10000000000000000) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (i64.const -0x8000000000000001) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80\00"
  "\01\85\80\80\80\00\00\42\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\94\80\80\80\00"
  "\01\8e\80\80\80\00\00\42\80\80\80\80\80\80\80\80"
  "\80\7f\1a\0b"
)
(assert_malformed
  (module quote "(func (i64.const 18446744073709551616) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (i64.const -9223372036854775809) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\00\00\00\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\00\00\00\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\ff\1a\0b"
)
(assert_malformed
  (module quote "(func (f32.const 0x1p128) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f32.const -0x1p128) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f32.const 0x1.ffffffp127) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f32.const -0x1.ffffffp127) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\99\76\96\7e\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\99\76\96\fe\1a\0b"
)
(assert_malformed
  (module quote "(func (f32.const 1e39) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f32.const -1e39) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\7f\ff\1a\0b"
)
(assert_malformed
  (module quote
    "(func (f32.const 340282356779733661637539395458142568448) drop)"
  )
  "constant out of range"
)
(assert_malformed
  (module quote
    "(func (f32.const -340282356779733661637539395458142568448) drop)"
  )
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\00\00\00\00\00\00\e0\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\00\00\00\00\00\00\e0\ff"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\ff"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\ff"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\ff"
  "\1a\0b"
)
(assert_malformed
  (module quote "(func (f64.const 0x1p1024) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f64.const -0x1p1024) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f64.const 0x1.fffffffffffff8p1023) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f64.const -0x1.fffffffffffff8p1023) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\a0\c8\eb\85\f3\cc\e1\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\a0\c8\eb\85\f3\cc\e1\ff"
  "\1a\0b"
)
(assert_malformed
  (module quote "(func (f64.const 1e309) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f64.const -1e309) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\ff"
  "\1a\0b"
)
(assert_malformed
  (module quote
    "(func (f64.const 269653970229347356221791135597556535197105851288767494898376215204735891170042808140884337949150317257310688430271573696351481990334196274152701320055306275479074865864826923114368235135583993416113802762682700913456874855354834422248712838998185022412196739306217084753107265771378949821875606039276187287552) drop)"
  )
  "constant out of range"
)
(assert_malformed
  (module quote
    "(func (f64.const -269653970229347356221791135597556535197105851288767494898376215204735891170042808140884337949150317257310688430271573696351481990334196274152701320055306275479074865864826923114368235135583993416113802762682700913456874855354834422248712838998185022412196739306217084753107265771378949821875606039276187287552) drop)"
  )
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\01\00\80\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\01\00\00\00\00\00\f0\7f"
  "\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
  "\01\88\80\80\80\00\00\43\ff\ff\ff\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
  "\01\8c\80\80\80\00\00\44\ff\ff\ff\ff\ff\ff\ff\7f"
  "\1a\0b"
)
(assert_malformed
  (module quote "(func (f32.const nan:1) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f64.const nan:1) drop)")
  "unknown operator"
)
(assert_malformed
  (module quote "(func (f32.const nan:0x0) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f64.const nan:0x0) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f32.const nan:0x80_0000) drop)")
  "constant out of range"
)
(assert_malformed
  (module quote "(func (f64.const nan:0x10_0000_0000_0000) drop)")
  "constant out of range"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_784_197_001_252_3e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_784_197_001_252_3e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_787_373_374_804_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_787_373_374_804_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_784_197_001_252_3e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_784_197_001_252_3e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_787_373_374_804_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_787_373_374_804_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_784_197_001_252_3e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_784_197_001_252_3e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_785_255_792_436_4e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\26\0b"
)
(assert_return (invoke "f") (f32.const 8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\a6\0b"
)
(assert_return (invoke "f") (f32.const -8.881_786_314_583_620_5e-16))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_899_906_842_624))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_899_906_842_624))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_309_495_808))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_309_495_808))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_899_906_842_624))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_899_906_842_624))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_899_906_842_624))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_899_906_842_624))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_041_060_352))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\58\0b"
)
(assert_return (invoke "f") (f32.const 1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\80\d8\0b"
)
(assert_return (invoke "f") (f32.const -1_125_900_175_278_080))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\00\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\01\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -1.401_298_464_324_817_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\02\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -2.802_596_928_649_634_1e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\00\00\0b"
)
(assert_return (invoke "f") (f32.const 4.203_895_392_974_451_2e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\03\00\00\80\0b"
)
(assert_return (invoke "f") (f32.const -4.203_895_392_974_451_2e-45))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\ff\ff\7f\7f\0b"
)
(assert_return (invoke "f") (f32.const 3.402_823_466_385_288_6e+38))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\ff\ff\7f\ff\0b"
)
(assert_return (invoke "f") (f32.const -3.402_823_466_385_288_6e+38))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\ff\ff\7f\7f\0b"
)
(assert_return (invoke "f") (f32.const 3.402_823_466_385_288_6e+38))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\ff\ff\7f\ff\0b"
)
(assert_return (invoke "f") (f32.const -3.402_823_466_385_288_6e+38))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\ff\ff\7f\7f\0b"
)
(assert_return (invoke "f") (f32.const 3.402_823_466_385_288_6e+38))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7d\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\8d\80\80\80\00\01\87\80\80"
  "\80\00\00\43\ff\ff\7f\ff\0b"
)
(assert_return (invoke "f") (f32.const -3.402_823_466_385_288_6e+38))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_1e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_1e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_1e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_1e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_884_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_2e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 2.409_919_865_102_885_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -2.409_919_865_102_885_7e-181))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 5.357_543_035_931_336_6e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -5.357_543_035_931_336_6e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 5.357_543_035_931_337_8e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -5.357_543_035_931_337_8e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 5.357_543_035_931_337_8e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -5.357_543_035_931_337_8e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 5.357_543_035_931_339e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -5.357_543_035_931_339e+300))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_993e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_993e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_993_9e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_994_8e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (f64.const 4.149_515_568_880_995_7e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (f64.const -4.149_515_568_880_995_7e+180))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_286_8e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_286_8e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_1e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_5e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (f64.const 1.584_563_250_285_287_8e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (f64.const -1.584_563_250_285_287_8e+29))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\b0\43\0b"
)
(assert_return (invoke "f") (f64.const 1.152_921_504_606_847e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\b0\c3\0b"
)
(assert_return (invoke "f") (f64.const -1.152_921_504_606_847e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\b0\43\0b"
)
(assert_return (invoke "f") (f64.const 1.152_921_504_606_847_2e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\b0\c3\0b"
)
(assert_return (invoke "f") (f64.const -1.152_921_504_606_847_2e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\b0\43\0b"
)
(assert_return (invoke "f") (f64.const 1.152_921_504_606_847_2e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\b0\c3\0b"
)
(assert_return (invoke "f") (f64.const -1.152_921_504_606_847_2e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\b0\43\0b"
)
(assert_return (invoke "f") (f64.const 1.152_921_504_606_847_5e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\b0\c3\0b"
)
(assert_return (invoke "f") (f64.const -1.152_921_504_606_847_5e+18))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -4.940_656_458_412_465_4e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (f64.const 9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (f64.const -9.881_312_916_824_930_9e-324))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\10\00\0b"
)
(assert_return (invoke "f") (f64.const 2.225_073_858_507_202_9e-308))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\10\80\0b"
)
(assert_return (invoke "f") (f64.const -2.225_073_858_507_202_9e-308))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\7f\0b"
)
(assert_return (invoke "f") (f64.const 1.797_693_134_862_315_7e+308))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\ff\0b"
)
(assert_return (invoke "f") (f64.const -1.797_693_134_862_315_7e+308))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\7f\0b"
)
(assert_return (invoke "f") (f64.const 1.797_693_134_862_315_7e+308))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\ff\ff\ff\ff\ff\ff\ef\ff\0b"
)
(assert_return (invoke "f") (f64.const -1.797_693_134_862_315_7e+308))
