(module binary
  "\00\61\73\6d\01\00\00\00\01\a9\80\80\80\00\09\60"
  "\03\7f\7f\7f\01\7f\60\00\00\60\00\01\7f\60\00\01"
  "\7e\60\00\01\7d\60\00\01\7c\60\01\7f\01\7f\60\01"
  "\7f\00\60\02\7f\7f\00\03\c0\80\80\80\00\3f\01\01"
  "\01\01\01\02\03\04\05\06\06\07\06\06\06\06\06\07"
  "\02\01\02\06\01\02\02\03\06\08\08\06\06\02\00\02"
  "\02\02\00\02\02\02\02\06\06\06\02\02\02\02\02\02"
  "\05\02\02\02\02\02\02\06\06\06\06\06\06\04\85\80"
  "\80\80\00\01\70\01\01\01\05\83\80\80\80\00\01\00"
  "\01\06\86\80\80\80\00\01\7f\01\41\0a\0b\07\d1\88"
  "\80\80\00\3c\08\74\79\70\65\2d\69\33\32\00\01\08"
  "\74\79\70\65\2d\69\36\34\00\02\08\74\79\70\65\2d"
  "\66\33\32\00\03\08\74\79\70\65\2d\66\36\34\00\04"
  "\0e\74\79\70\65\2d\69\33\32\2d\76\61\6c\75\65\00"
  "\05\0e\74\79\70\65\2d\69\36\34\2d\76\61\6c\75\65"
  "\00\06\0e\74\79\70\65\2d\66\33\32\2d\76\61\6c\75"
  "\65\00\07\0e\74\79\70\65\2d\66\36\34\2d\76\61\6c"
  "\75\65\00\08\0e\61\73\2d\62\6c\6f\63\6b\2d\66\69"
  "\72\73\74\00\09\0c\61\73\2d\62\6c\6f\63\6b\2d\6d"
  "\69\64\00\0a\0d\61\73\2d\62\6c\6f\63\6b\2d\6c\61"
  "\73\74\00\0b\14\61\73\2d\62\6c\6f\63\6b\2d\66\69"
  "\72\73\74\2d\76\61\6c\75\65\00\0c\12\61\73\2d\62"
  "\6c\6f\63\6b\2d\6d\69\64\2d\76\61\6c\75\65\00\0d"
  "\13\61\73\2d\62\6c\6f\63\6b\2d\6c\61\73\74\2d\76"
  "\61\6c\75\65\00\0e\0d\61\73\2d\6c\6f\6f\70\2d\66"
  "\69\72\73\74\00\0f\0b\61\73\2d\6c\6f\6f\70\2d\6d"
  "\69\64\00\10\0c\61\73\2d\6c\6f\6f\70\2d\6c\61\73"
  "\74\00\11\0b\61\73\2d\62\72\2d\76\61\6c\75\65\00"
  "\12\0d\61\73\2d\62\72\5f\69\66\2d\63\6f\6e\64\00"
  "\13\0e\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65"
  "\00\14\13\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75"
  "\65\2d\63\6f\6e\64\00\15\11\61\73\2d\62\72\5f\74"
  "\61\62\6c\65\2d\69\6e\64\65\78\00\16\11\61\73\2d"
  "\62\72\5f\74\61\62\6c\65\2d\76\61\6c\75\65\00\17"
  "\17\61\73\2d\62\72\5f\74\61\62\6c\65\2d\76\61\6c"
  "\75\65\2d\69\6e\64\65\78\00\18\0f\61\73\2d\72\65"
  "\74\75\72\6e\2d\76\61\6c\75\65\00\19\0a\61\73\2d"
  "\69\66\2d\63\6f\6e\64\00\1a\0a\61\73\2d\69\66\2d"
  "\74\68\65\6e\00\1b\0a\61\73\2d\69\66\2d\65\6c\73"
  "\65\00\1c\0f\61\73\2d\73\65\6c\65\63\74\2d\66\69"
  "\72\73\74\00\1d\10\61\73\2d\73\65\6c\65\63\74\2d"
  "\73\65\63\6f\6e\64\00\1e\0e\61\73\2d\73\65\6c\65"
  "\63\74\2d\63\6f\6e\64\00\1f\0d\61\73\2d\63\61\6c"
  "\6c\2d\66\69\72\73\74\00\21\0b\61\73\2d\63\61\6c"
  "\6c\2d\6d\69\64\00\22\0c\61\73\2d\63\61\6c\6c\2d"
  "\6c\61\73\74\00\23\15\61\73\2d\63\61\6c\6c\5f\69"
  "\6e\64\69\72\65\63\74\2d\66\75\6e\63\00\25\16\61"
  "\73\2d\63\61\6c\6c\5f\69\6e\64\69\72\65\63\74\2d"
  "\66\69\72\73\74\00\26\14\61\73\2d\63\61\6c\6c\5f"
  "\69\6e\64\69\72\65\63\74\2d\6d\69\64\00\27\15\61"
  "\73\2d\63\61\6c\6c\5f\69\6e\64\69\72\65\63\74\2d"
  "\6c\61\73\74\00\28\12\61\73\2d\6c\6f\63\61\6c\2e"
  "\73\65\74\2d\76\61\6c\75\65\00\29\12\61\73\2d\6c"
  "\6f\63\61\6c\2e\74\65\65\2d\76\61\6c\75\65\00\2a"
  "\13\61\73\2d\67\6c\6f\62\61\6c\2e\73\65\74\2d\76"
  "\61\6c\75\65\00\2b\0f\61\73\2d\6c\6f\61\64\2d\61"
  "\64\64\72\65\73\73\00\2c\10\61\73\2d\6c\6f\61\64"
  "\4e\2d\61\64\64\72\65\73\73\00\2d\10\61\73\2d\73"
  "\74\6f\72\65\2d\61\64\64\72\65\73\73\00\2e\0e\61"
  "\73\2d\73\74\6f\72\65\2d\76\61\6c\75\65\00\2f\11"
  "\61\73\2d\73\74\6f\72\65\4e\2d\61\64\64\72\65\73"
  "\73\00\30\0f\61\73\2d\73\74\6f\72\65\4e\2d\76\61"
  "\6c\75\65\00\31\10\61\73\2d\75\6e\61\72\79\2d\6f"
  "\70\65\72\61\6e\64\00\32\0e\61\73\2d\62\69\6e\61"
  "\72\79\2d\6c\65\66\74\00\33\0f\61\73\2d\62\69\6e"
  "\61\72\79\2d\72\69\67\68\74\00\34\0f\61\73\2d\74"
  "\65\73\74\2d\6f\70\65\72\61\6e\64\00\35\0f\61\73"
  "\2d\63\6f\6d\70\61\72\65\2d\6c\65\66\74\00\36\10"
  "\61\73\2d\63\6f\6d\70\61\72\65\2d\72\69\67\68\74"
  "\00\37\13\61\73\2d\6d\65\6d\6f\72\79\2e\67\72\6f"
  "\77\2d\73\69\7a\65\00\38\12\6e\65\73\74\65\64\2d"
  "\62\6c\6f\63\6b\2d\76\61\6c\75\65\00\39\0f\6e\65"
  "\73\74\65\64\2d\62\72\2d\76\61\6c\75\65\00\3a\12"
  "\6e\65\73\74\65\64\2d\62\72\5f\69\66\2d\76\61\6c"
  "\75\65\00\3b\17\6e\65\73\74\65\64\2d\62\72\5f\69"
  "\66\2d\76\61\6c\75\65\2d\63\6f\6e\64\00\3c\15\6e"
  "\65\73\74\65\64\2d\62\72\5f\74\61\62\6c\65\2d\76"
  "\61\6c\75\65\00\3d\1b\6e\65\73\74\65\64\2d\62\72"
  "\5f\74\61\62\6c\65\2d\76\61\6c\75\65\2d\69\6e\64"
  "\65\78\00\3e\09\87\80\80\80\00\01\00\41\00\0b\01"
  "\24\0a\d6\8a\80\80\00\3f\82\80\80\80\00\00\0b\8d"
  "\80\80\80\00\00\02\40\41\00\41\01\0d\00\68\1a\0b"
  "\0b\8d\80\80\80\00\00\02\40\42\00\41\01\0d\00\7a"
  "\1a\0b\0b\90\80\80\80\00\00\02\40\43\00\00\00\00"
  "\41\01\0d\00\8c\1a\0b\0b\94\80\80\80\00\00\02\40"
  "\44\00\00\00\00\00\00\00\00\41\01\0d\00\9a\1a\0b"
  "\0b\8c\80\80\80\00\00\02\7f\41\01\41\01\0d\00\68"
  "\0b\0b\8c\80\80\80\00\00\02\7e\42\02\41\01\0d\00"
  "\7a\0b\0b\8f\80\80\80\00\00\02\7d\43\00\00\40\40"
  "\41\01\0d\00\8c\0b\0b\93\80\80\80\00\00\02\7c\44"
  "\00\00\00\00\00\00\10\40\41\01\0d\00\9a\0b\0b\8e"
  "\80\80\80\00\00\02\40\20\00\0d\00\41\02\0f\0b\41"
  "\03\0b\90\80\80\80\00\00\02\40\10\00\20\00\0d\00"
  "\41\02\0f\0b\41\03\0b\8d\80\80\80\00\00\02\40\10"
  "\00\10\00\20\00\0d\00\0b\0b\8f\80\80\80\00\00\02"
  "\7f\41\0a\20\00\0d\00\1a\41\0b\0f\0b\0b\91\80\80"
  "\80\00\00\02\7f\10\00\41\14\20\00\0d\00\1a\41\15"
  "\0f\0b\0b\8f\80\80\80\00\00\02\7f\10\00\10\00\41"
  "\0b\20\00\0d\00\0b\0b\91\80\80\80\00\00\02\40\03"
  "\40\20\00\0d\01\41\02\0f\0b\0b\41\03\0b\93\80\80"
  "\80\00\00\02\40\03\40\10\00\20\00\0d\01\41\02\0f"
  "\0b\0b\41\04\0b\8b\80\80\80\00\00\03\40\10\00\20"
  "\00\0d\01\0b\0b\8d\80\80\80\00\00\02\7f\41\01\41"
  "\02\0d\00\0c\00\0b\0b\8d\80\80\80\00\00\02\40\41"
  "\01\41\01\0d\00\0d\00\0b\0b\92\80\80\80\00\00\02"
  "\7f\41\01\41\02\0d\00\41\03\0d\00\1a\41\04\0b\0b"
  "\92\80\80\80\00\00\02\7f\41\02\41\01\20\00\0d\00"
  "\0d\00\1a\41\04\0b\0b\90\80\80\80\00\00\02\40\41"
  "\01\41\02\0d\00\0e\02\00\00\00\0b\0b\94\80\80\80"
  "\00\00\02\7f\41\01\41\02\0d\00\41\03\0e\02\00\00"
  "\00\41\04\0b\0b\93\80\80\80\00\00\02\7f\41\02\41"
  "\01\41\03\0d\00\0e\01\00\00\41\04\0b\0b\8c\80\80"
  "\80\00\00\02\7e\42\01\41\02\0d\00\0f\0b\0b\93\80"
  "\80\80\00\00\02\7f\41\01\20\00\0d\00\04\7f\41\02"
  "\05\41\03\0b\0b\0b\91\80\80\80\00\00\02\40\20\00"
  "\04\40\20\01\0d\01\05\10\00\0b\0b\0b\91\80\80\80"
  "\00\00\02\40\20\00\04\40\10\00\05\20\01\0d\01\0b"
  "\0b\0b\90\80\80\80\00\00\02\7f\41\03\41\0a\0d\00"
  "\41\02\20\00\1b\0b\0b\90\80\80\80\00\00\02\7f\41"
  "\01\41\03\41\0a\0d\00\20\00\1b\0b\0b\90\80\80\80"
  "\00\00\02\7f\41\01\41\02\41\03\41\0a\0d\00\1b\0b"
  "\0b\84\80\80\80\00\00\41\7f\0b\91\80\80\80\00\00"
  "\02\7f\41\0c\41\01\0d\00\41\02\41\03\10\20\0b\0b"
  "\91\80\80\80\00\00\02\7f\41\01\41\0d\41\01\0d\00"
  "\41\03\10\20\0b\0b\91\80\80\80\00\00\02\7f\41\01"
  "\41\02\41\0e\41\01\0d\00\10\20\0b\0b\84\80\80\80"
  "\00\00\20\00\0b\94\80\80\80\00\00\02\7f\41\04\41"
  "\0a\0d\00\41\01\41\02\41\00\11\00\00\0b\0b\94\80"
  "\80\80\00\00\02\7f\41\01\41\04\41\0a\0d\00\41\02"
  "\41\00\11\00\00\0b\0b\94\80\80\80\00\00\02\7f\41"
  "\01\41\02\41\04\41\0a\0d\00\41\00\11\00\00\0b\0b"
  "\94\80\80\80\00\00\02\7f\41\01\41\02\41\03\41\04"
  "\41\0a\0d\00\11\00\00\0b\0b\91\80\80\80\00\01\01"
  "\7f\02\7f\41\11\20\00\0d\00\21\00\41\7f\0b\0b\90"
  "\80\80\80\00\00\02\7f\41\01\20\00\0d\00\22\00\41"
  "\7f\0f\0b\0b\90\80\80\80\00\00\02\7f\41\01\20\00"
  "\0d\00\24\00\41\7f\0f\0b\0b\8e\80\80\80\00\00\02"
  "\7f\41\01\41\01\0d\00\28\02\00\0b\0b\8e\80\80\80"
  "\00\00\02\7f\41\1e\41\01\0d\00\2c\00\00\0b\0b\92"
  "\80\80\80\00\00\02\7f\41\1e\41\01\0d\00\41\07\36"
  "\02\00\41\7f\0b\0b\92\80\80\80\00\00\02\7f\41\02"
  "\41\1f\41\01\0d\00\36\02\00\41\7f\0b\0b\92\80\80"
  "\80\00\00\02\7f\41\20\41\01\0d\00\41\07\3a\00\00"
  "\41\7f\0b\0b\92\80\80\80\00\00\02\7f\41\02\41\21"
  "\41\01\0d\00\3b\01\00\41\7f\0b\0b\93\80\80\80\00"
  "\00\02\7c\44\00\00\00\00\00\00\f0\3f\41\01\0d\00"
  "\9a\0b\0b\8e\80\80\80\00\00\02\7f\41\01\41\01\0d"
  "\00\41\0a\6a\0b\0b\8e\80\80\80\00\00\02\7f\41\0a"
  "\41\01\41\01\0d\00\6b\0b\0b\8c\80\80\80\00\00\02"
  "\7f\41\00\41\01\0d\00\45\0b\0b\8e\80\80\80\00\00"
  "\02\7f\41\01\41\01\0d\00\41\0a\4d\0b\0b\8e\80\80"
  "\80\00\00\02\7f\41\0a\41\01\41\2a\0d\00\47\0b\0b"
  "\8d\80\80\80\00\00\02\7f\41\01\41\01\0d\00\40\00"
  "\0b\0b\9a\80\80\80\00\00\41\01\02\7f\41\02\1a\41"
  "\04\02\7f\41\08\20\00\0d\01\1a\41\10\0b\6a\0b\6a"
  "\0b\9b\80\80\80\00\00\41\01\02\7f\41\02\1a\02\7f"
  "\41\08\20\00\0d\01\1a\41\04\0b\0c\00\41\10\0b\6a"
  "\0b\9e\80\80\80\00\00\41\01\02\7f\41\02\1a\02\7f"
  "\41\08\20\00\0d\01\1a\41\04\0b\41\01\0d\00\1a\41"
  "\10\0b\6a\0b\9e\80\80\80\00\00\41\01\02\7f\41\02"
  "\1a\41\04\02\7f\41\08\20\00\0d\01\1a\41\01\0b\0d"
  "\00\1a\41\10\0b\6a\0b\9e\80\80\80\00\00\41\01\02"
  "\7f\41\02\1a\02\7f\41\08\20\00\0d\01\1a\41\04\0b"
  "\41\01\0e\00\00\41\10\0b\6a\0b\9e\80\80\80\00\00"
  "\41\01\02\7f\41\02\1a\41\04\02\7f\41\08\20\00\0d"
  "\01\1a\41\01\0b\0e\00\00\41\10\0b\6a\0b"
)
(assert_return (invoke "type-i32"))
(assert_return (invoke "type-i64"))
(assert_return (invoke "type-f32"))
(assert_return (invoke "type-f64"))
(assert_return (invoke "type-i32-value") (i32.const 1))
(assert_return (invoke "type-i64-value") (i64.const 2))
(assert_return (invoke "type-f32-value") (f32.const 3))
(assert_return (invoke "type-f64-value") (f64.const 4))
(assert_return (invoke "as-block-first" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-block-first" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-block-mid" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-block-mid" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-block-last" (i32.const 0)))
(assert_return (invoke "as-block-last" (i32.const 1)))
(assert_return (invoke "as-block-first-value" (i32.const 0)) (i32.const 11))
(assert_return (invoke "as-block-first-value" (i32.const 1)) (i32.const 10))
(assert_return (invoke "as-block-mid-value" (i32.const 0)) (i32.const 21))
(assert_return (invoke "as-block-mid-value" (i32.const 1)) (i32.const 20))
(assert_return (invoke "as-block-last-value" (i32.const 0)) (i32.const 11))
(assert_return (invoke "as-block-last-value" (i32.const 1)) (i32.const 11))
(assert_return (invoke "as-loop-first" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-loop-first" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-loop-mid" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-loop-mid" (i32.const 1)) (i32.const 4))
(assert_return (invoke "as-loop-last" (i32.const 0)))
(assert_return (invoke "as-loop-last" (i32.const 1)))
(assert_return (invoke "as-br-value") (i32.const 1))
(assert_return (invoke "as-br_if-cond"))
(assert_return (invoke "as-br_if-value") (i32.const 1))
(assert_return (invoke "as-br_if-value-cond" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-br_if-value-cond" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-br_table-index"))
(assert_return (invoke "as-br_table-value") (i32.const 1))
(assert_return (invoke "as-br_table-value-index") (i32.const 1))
(assert_return (invoke "as-return-value") (i64.const 1))
(assert_return (invoke "as-if-cond" (i32.const 0)) (i32.const 2))
(assert_return (invoke "as-if-cond" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-if-then" (i32.const 0) (i32.const 0)))
(assert_return (invoke "as-if-then" (i32.const 4) (i32.const 0)))
(assert_return (invoke "as-if-then" (i32.const 0) (i32.const 1)))
(assert_return (invoke "as-if-then" (i32.const 4) (i32.const 1)))
(assert_return (invoke "as-if-else" (i32.const 0) (i32.const 0)))
(assert_return (invoke "as-if-else" (i32.const 3) (i32.const 0)))
(assert_return (invoke "as-if-else" (i32.const 0) (i32.const 1)))
(assert_return (invoke "as-if-else" (i32.const 3) (i32.const 1)))
(assert_return (invoke "as-select-first" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-select-first" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-select-second" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-select-second" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-select-cond") (i32.const 3))
(assert_return (invoke "as-call-first") (i32.const 12))
(assert_return (invoke "as-call-mid") (i32.const 13))
(assert_return (invoke "as-call-last") (i32.const 14))
(assert_return (invoke "as-call_indirect-func") (i32.const 4))
(assert_return (invoke "as-call_indirect-first") (i32.const 4))
(assert_return (invoke "as-call_indirect-mid") (i32.const 4))
(assert_return (invoke "as-call_indirect-last") (i32.const 4))
(assert_return (invoke "as-local.set-value" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-local.set-value" (i32.const 1)) (i32.const 17))
(assert_return (invoke "as-local.tee-value" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-local.tee-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-global.set-value" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-global.set-value" (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-load-address") (i32.const 1))
(assert_return (invoke "as-loadN-address") (i32.const 30))
(assert_return (invoke "as-store-address") (i32.const 30))
(assert_return (invoke "as-store-value") (i32.const 31))
(assert_return (invoke "as-storeN-address") (i32.const 32))
(assert_return (invoke "as-storeN-value") (i32.const 33))
(assert_return (invoke "as-unary-operand") (f64.const 1))
(assert_return (invoke "as-binary-left") (i32.const 1))
(assert_return (invoke "as-binary-right") (i32.const 1))
(assert_return (invoke "as-test-operand") (i32.const 0))
(assert_return (invoke "as-compare-left") (i32.const 1))
(assert_return (invoke "as-compare-right") (i32.const 1))
(assert_return (invoke "as-memory.grow-size") (i32.const 1))
(assert_return (invoke "nested-block-value" (i32.const 0)) (i32.const 21))
(assert_return (invoke "nested-block-value" (i32.const 1)) (i32.const 9))
(assert_return (invoke "nested-br-value" (i32.const 0)) (i32.const 5))
(assert_return (invoke "nested-br-value" (i32.const 1)) (i32.const 9))
(assert_return (invoke "nested-br_if-value" (i32.const 0)) (i32.const 5))
(assert_return (invoke "nested-br_if-value" (i32.const 1)) (i32.const 9))
(assert_return (invoke "nested-br_if-value-cond" (i32.const 0)) (i32.const 5))
(assert_return (invoke "nested-br_if-value-cond" (i32.const 1)) (i32.const 9))
(assert_return (invoke "nested-br_table-value" (i32.const 0)) (i32.const 5))
(assert_return (invoke "nested-br_table-value" (i32.const 1)) (i32.const 9))
(assert_return
  (invoke "nested-br_table-value-index" (i32.const 0))
  (i32.const 5)
)
(assert_return
  (invoke "nested-br_table-value-index" (i32.const 1))
  (i32.const 9)
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\41\00\0d\00\68\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\41\00\0d\00\7a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\41\00\0d\00\8c\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\41\00\0d\00\9a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\41\01\0d\00\68\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\42\01\0d\00\7a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\93\80\80\80\00"
    "\01\8d\80\80\80\00\00\02\40\43\00\00\80\3f\0d\00"
    "\8c\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\40\42\01\0d\00\9a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\02\7f\41\00\0d\00\41\01"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\00\02\7f\41\01\0d\00\41\01"
    "\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\00\02\40\41\00\41\00\0d\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\00\02\40\41\00\41\01\0d\00\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\02\7f\01\41\00\0d\00\41"
    "\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\02\7f\01\41\01\0d\00\41"
    "\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7f\42\01\41\00\0d\00"
    "\1a\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7f\42\01\41\00\0d\00"
    "\1a\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8d\80\80\80\00"
    "\01\87\80\80\80\00\00\02\40\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
    "\01\88\80\80\80\00\00\02\40\01\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80\00"
    "\01\89\80\80\80\00\00\02\40\42\00\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\02\7f\41\00\01\0d\00\41"
    "\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\02\7f\41\00\02\40\41\01"
    "\0d\01\0b\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7f\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\02\7f\41\00\42\00\0d\00"
    "\41\01\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\96\80\80\80\00"
    "\01\90\80\80\80\00\00\02\40\41\00\41\00\04\7f\0d"
    "\00\0b\0b\45\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\98\80\80\80\00"
    "\01\92\80\80\80\00\00\02\40\41\00\41\00\04\7f\41"
    "\01\0d\00\0b\0b\45\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\02\7f\0d\00\0f\0b\45\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
    "\01\8c\80\80\80\00\00\02\7f\41\01\0d\00\0f\0b\45"
    "\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8c\80\80\80\00"
    "\01\86\80\80\80\00\00\41\01\0d\01\0b"
  )
  "unknown label"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
    "\01\8c\80\80\80\00\00\02\40\02\40\41\01\0d\05\0b"
    "\0b\0b"
  )
  "unknown label"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\90\80\80\80\00"
    "\01\8a\80\80\80\00\00\41\01\0d\81\80\80\80\01\0b"
  )
  "unknown label"
)
