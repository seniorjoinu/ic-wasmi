(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\8a\80\80\80\00\09\00\00\00\00\00\00\00"
  "\00\00\05\83\80\80\80\00\01\00\01\07\97\81\80\80"
  "\00\09\0e\61\73\2d\62\6c\6f\63\6b\2d\76\61\6c\75"
  "\65\00\00\0d\61\73\2d\6c\6f\6f\70\2d\76\61\6c\75"
  "\65\00\01\0b\61\73\2d\62\72\2d\76\61\6c\75\65\00"
  "\02\0e\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65"
  "\00\03\13\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75"
  "\65\2d\63\6f\6e\64\00\04\11\61\73\2d\62\72\5f\74"
  "\61\62\6c\65\2d\76\61\6c\75\65\00\05\0f\61\73\2d"
  "\72\65\74\75\72\6e\2d\76\61\6c\75\65\00\06\0a\61"
  "\73\2d\69\66\2d\74\68\65\6e\00\07\0a\61\73\2d\69"
  "\66\2d\65\6c\73\65\00\08\0a\ac\81\80\80\00\09\8c"
  "\80\80\80\00\00\02\40\41\00\41\01\36\02\00\0b\0b"
  "\8c\80\80\80\00\00\03\40\41\00\41\01\36\02\00\0b"
  "\0b\8e\80\80\80\00\00\02\40\41\00\41\01\36\02\00"
  "\0c\00\0b\0b\90\80\80\80\00\00\02\40\41\00\41\01"
  "\36\02\00\41\01\0d\00\0b\0b\90\80\80\80\00\00\02"
  "\40\41\06\41\00\41\01\36\02\00\0d\00\0b\0b\91\80"
  "\80\80\00\00\02\40\41\00\41\01\36\02\00\41\01\0e"
  "\00\00\0b\0b\8a\80\80\80\00\00\41\00\41\01\36\02"
  "\00\0f\0b\8e\80\80\80\00\00\41\01\04\40\41\00\41"
  "\01\36\02\00\0b\0b\8f\80\80\80\00\00\41\00\04\40"
  "\05\41\00\41\01\36\02\00\0b\0b"
)
(assert_return (invoke "as-block-value"))
(assert_return (invoke "as-loop-value"))
(assert_return (invoke "as-br-value"))
(assert_return (invoke "as-br_if-value"))
(assert_return (invoke "as-br_if-value-cond"))
(assert_return (invoke "as-br_table-value"))
(assert_return (invoke "as-return-value"))
(assert_return (invoke "as-if-then"))
(assert_return (invoke "as-if-else"))
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (i32.store32 (local.get 0) (i32.const 0)))"
  )
  "unknown operator"
)
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (i32.store64 (local.get 0) (i64.const 0)))"
  )
  "unknown operator"
)
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (i64.store64 (local.get 0) (i64.const 0)))"
  )
  "unknown operator"
)
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (f32.store32 (local.get 0) (f32.const 0)))"
  )
  "unknown operator"
)
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (f32.store64 (local.get 0) (f64.const 0)))"
  )
  "unknown operator"
)
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (f64.store32 (local.get 0) (f32.const 0)))"
  )
  "unknown operator"
)
(assert_malformed
  (module quote
    "(memory 1)(func (param i32) (f64.store64 (local.get 0) (f64.const 0)))"
  )
  "unknown operator"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7f\01\7f\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\41\01\36\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7e\01\7e\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\42\01\37\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7d\01\7d\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80"
    "\00\00\41\00\43\00\00\80\3f\38\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7c\01\7c\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\96\80\80\80\00\01\90\80\80\80"
    "\00\00\41\00\44\00\00\00\00\00\00\f0\3f\39\03\00"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7f\01\7f\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\41\01\3a\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7f\01\7f\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\41\01\3b\01\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7e\01\7e\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\42\01\3c\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7e\01\7e\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\42\01\3d\01\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7e\01\7e\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80"
    "\00\00\41\00\42\01\3e\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\8b\80\80\80\00\01\85\80\80\80\00\00"
    "\36\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\8d\80\80\80\00\01\87\80\80\80\00\00"
    "\41\00\36\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\41\00\02\40\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\02\40\41\00\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\41\00\03\40\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\03\40\41\00\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\41\00\04\40\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\04\40\41\00\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\95\80\80\80\00\01\8f\80\80\80\00\00"
    "\41\00\41\00\04\7f\41\00\05\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\95\80\80\80\00\01\8f\80\80\80\00\00"
    "\41\00\04\7f\41\00\05\41\00\36\02\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\94\80\80\80\00\01\8e\80\80\80\00\00"
    "\41\00\41\00\02\40\36\02\00\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\94\80\80\80\00\01\8e\80\80\80\00\00"
    "\41\00\02\40\41\00\36\02\00\0c\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\96\80\80\80\00\01\90\80\80\80\00\00"
    "\41\00\41\00\02\40\36\02\00\41\01\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\96\80\80\80\00\01\90\80\80\80\00\00"
    "\41\00\02\40\41\00\36\02\00\41\01\0d\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\95\80\80\80\00\01\8f\80\80\80\00\00"
    "\41\00\41\00\02\40\36\02\00\0e\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\95\80\80\80\00\01\8f\80\80\80\00\00"
    "\41\00\02\40\41\00\36\02\00\0e\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\8c\80\80\80\00\01\86\80\80\80\00\00"
    "\36\02\00\0f\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\8e\80\80\80\00\01\88\80\80\80\00\00"
    "\41\00\36\02\00\0f\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\90\80\80\80\00\01\8a\80\80\80\00\00"
    "\36\02\00\41\01\41\02\1b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\36\02\00\41\01\41\02\1b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
    "\00\00\60\01\7f\01\7f\03\83\80\80\80\00\02\00\01"
    "\05\83\80\80\80\00\01\00\01\0a\96\80\80\80\00\02"
    "\87\80\80\80\00\00\36\02\00\10\01\0b\84\80\80\80"
    "\00\00\20\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
    "\00\00\60\01\7f\01\7f\03\83\80\80\80\00\02\00\01"
    "\05\83\80\80\80\00\01\00\01\0a\98\80\80\80\00\02"
    "\89\80\80\80\00\00\41\00\36\02\00\10\01\0b\84\80"
    "\80\80\00\00\20\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
    "\01\7f\01\7f\60\00\00\03\83\80\80\80\00\02\00\01"
    "\04\85\80\80\80\00\01\70\01\01\01\05\83\80\80\80"
    "\00\01\00\01\09\87\80\80\80\00\01\00\41\00\0b\01"
    "\00\0a\9c\80\80\80\00\02\84\80\80\80\00\00\20\00"
    "\0b\8d\80\80\80\00\00\02\7f\36\02\00\41\00\11\00"
    "\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
    "\01\7f\01\7f\60\00\00\03\83\80\80\80\00\02\00\01"
    "\04\85\80\80\80\00\01\70\01\01\01\05\83\80\80\80"
    "\00\01\00\01\09\87\80\80\80\00\01\00\41\00\0b\01"
    "\00\0a\9e\80\80\80\00\02\84\80\80\80\00\00\20\00"
    "\0b\8f\80\80\80\00\00\02\7f\41\00\36\02\00\41\00"
    "\11\00\00\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\41\00\36\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\41\00\3a\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\41\00\3b\01\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\41\00\37\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\42\00\3c\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\42\00\3d\01\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\43\00\00\00\00\42\00\3e\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\95\80\80\80\00\01\8f\80\80\80\00\00"
    "\43\00\00\00\00\43\00\00\00\00\38\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\99\80\80\80\00\01\93\80\80\80\00\00"
    "\43\00\00\00\00\44\00\00\00\00\00\00\00\00\39\03"
    "\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\43\00\00\00\00\36\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\43\00\00\00\00\3a\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\43\00\00\00\00\3b\01\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\92\80\80\80\00\01\8c\80\80\80\00\00"
    "\41\00\43\00\00\00\00\37\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\96\80\80\80\00\01\90\80\80\80\00\00"
    "\41\00\44\00\00\00\00\00\00\00\00\3c\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\96\80\80\80\00\01\90\80\80\80\00\00"
    "\41\00\44\00\00\00\00\00\00\00\00\3d\01\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\96\80\80\80\00\01\90\80\80\80\00\00"
    "\41\00\44\00\00\00\00\00\00\00\00\3e\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80\00\00"
    "\41\00\41\00\38\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\05\83\80\80\80\00"
    "\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80\00\00"
    "\41\00\42\00\39\03\00\0b"
  )
  "type mismatch"
)
