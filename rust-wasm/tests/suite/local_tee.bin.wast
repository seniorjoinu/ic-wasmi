(module binary
  "\00\61\73\6d\01\00\00\00\01\d8\80\80\80\00\10\60"
  "\03\7f\7f\7f\01\7f\60\00\01\7f\60\00\01\7e\60\00"
  "\01\7d\60\00\01\7c\60\01\7f\01\7f\60\01\7e\01\7e"
  "\60\01\7d\01\7d\60\01\7c\01\7c\60\05\7e\7d\7c\7f"
  "\7f\00\60\05\7e\7d\7c\7f\7f\01\7e\60\05\7e\7d\7c"
  "\7f\7f\01\7c\60\00\00\60\01\7f\00\60\02\7f\7f\01"
  "\7f\60\01\7e\01\7f\03\ba\80\80\80\00\39\01\02\03"
  "\04\05\06\07\08\09\0a\0b\0c\05\05\05\05\05\05\05"
  "\0d\05\05\0d\05\05\05\05\05\05\0e\0e\05\00\05\05"
  "\05\05\05\05\05\0c\05\0c\05\05\0d\0d\0d\0d\07\05"
  "\05\05\05\05\0f\05\04\85\80\80\80\00\01\70\01\01"
  "\01\05\83\80\80\80\00\01\00\01\06\86\80\80\80\00"
  "\01\7f\01\41\00\0b\07\cf\87\80\80\00\37\0e\74\79"
  "\70\65\2d\6c\6f\63\61\6c\2d\69\33\32\00\00\0e\74"
  "\79\70\65\2d\6c\6f\63\61\6c\2d\69\36\34\00\01\0e"
  "\74\79\70\65\2d\6c\6f\63\61\6c\2d\66\33\32\00\02"
  "\0e\74\79\70\65\2d\6c\6f\63\61\6c\2d\66\36\34\00"
  "\03\0e\74\79\70\65\2d\70\61\72\61\6d\2d\69\33\32"
  "\00\04\0e\74\79\70\65\2d\70\61\72\61\6d\2d\69\36"
  "\34\00\05\0e\74\79\70\65\2d\70\61\72\61\6d\2d\66"
  "\33\32\00\06\0e\74\79\70\65\2d\70\61\72\61\6d\2d"
  "\66\36\34\00\07\0a\74\79\70\65\2d\6d\69\78\65\64"
  "\00\08\05\77\72\69\74\65\00\09\06\72\65\73\75\6c"
  "\74\00\0a\0e\61\73\2d\62\6c\6f\63\6b\2d\66\69\72"
  "\73\74\00\0c\0c\61\73\2d\62\6c\6f\63\6b\2d\6d\69"
  "\64\00\0d\0d\61\73\2d\62\6c\6f\63\6b\2d\6c\61\73"
  "\74\00\0e\0d\61\73\2d\6c\6f\6f\70\2d\66\69\72\73"
  "\74\00\0f\0b\61\73\2d\6c\6f\6f\70\2d\6d\69\64\00"
  "\10\0c\61\73\2d\6c\6f\6f\70\2d\6c\61\73\74\00\11"
  "\0b\61\73\2d\62\72\2d\76\61\6c\75\65\00\12\0d\61"
  "\73\2d\62\72\5f\69\66\2d\63\6f\6e\64\00\13\0e\61"
  "\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65\00\14\13"
  "\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65\2d\63"
  "\6f\6e\64\00\15\11\61\73\2d\62\72\5f\74\61\62\6c"
  "\65\2d\69\6e\64\65\78\00\16\11\61\73\2d\62\72\5f"
  "\74\61\62\6c\65\2d\76\61\6c\75\65\00\17\17\61\73"
  "\2d\62\72\5f\74\61\62\6c\65\2d\76\61\6c\75\65\2d"
  "\69\6e\64\65\78\00\18\0f\61\73\2d\72\65\74\75\72"
  "\6e\2d\76\61\6c\75\65\00\19\0a\61\73\2d\69\66\2d"
  "\63\6f\6e\64\00\1a\0a\61\73\2d\69\66\2d\74\68\65"
  "\6e\00\1b\0a\61\73\2d\69\66\2d\65\6c\73\65\00\1c"
  "\0f\61\73\2d\73\65\6c\65\63\74\2d\66\69\72\73\74"
  "\00\1d\10\61\73\2d\73\65\6c\65\63\74\2d\73\65\63"
  "\6f\6e\64\00\1e\0e\61\73\2d\73\65\6c\65\63\74\2d"
  "\63\6f\6e\64\00\1f\0d\61\73\2d\63\61\6c\6c\2d\66"
  "\69\72\73\74\00\21\0b\61\73\2d\63\61\6c\6c\2d\6d"
  "\69\64\00\22\0c\61\73\2d\63\61\6c\6c\2d\6c\61\73"
  "\74\00\23\16\61\73\2d\63\61\6c\6c\5f\69\6e\64\69"
  "\72\65\63\74\2d\66\69\72\73\74\00\24\14\61\73\2d"
  "\63\61\6c\6c\5f\69\6e\64\69\72\65\63\74\2d\6d\69"
  "\64\00\25\15\61\73\2d\63\61\6c\6c\5f\69\6e\64\69"
  "\72\65\63\74\2d\6c\61\73\74\00\26\16\61\73\2d\63"
  "\61\6c\6c\5f\69\6e\64\69\72\65\63\74\2d\69\6e\64"
  "\65\78\00\27\12\61\73\2d\6c\6f\63\61\6c\2e\73\65"
  "\74\2d\76\61\6c\75\65\00\28\12\61\73\2d\6c\6f\63"
  "\61\6c\2e\74\65\65\2d\76\61\6c\75\65\00\29\13\61"
  "\73\2d\67\6c\6f\62\61\6c\2e\73\65\74\2d\76\61\6c"
  "\75\65\00\2a\0f\61\73\2d\6c\6f\61\64\2d\61\64\64"
  "\72\65\73\73\00\2b\10\61\73\2d\6c\6f\61\64\4e\2d"
  "\61\64\64\72\65\73\73\00\2c\10\61\73\2d\73\74\6f"
  "\72\65\2d\61\64\64\72\65\73\73\00\2d\0e\61\73\2d"
  "\73\74\6f\72\65\2d\76\61\6c\75\65\00\2e\11\61\73"
  "\2d\73\74\6f\72\65\4e\2d\61\64\64\72\65\73\73\00"
  "\2f\0f\61\73\2d\73\74\6f\72\65\4e\2d\76\61\6c\75"
  "\65\00\30\10\61\73\2d\75\6e\61\72\79\2d\6f\70\65"
  "\72\61\6e\64\00\31\0e\61\73\2d\62\69\6e\61\72\79"
  "\2d\6c\65\66\74\00\32\0f\61\73\2d\62\69\6e\61\72"
  "\79\2d\72\69\67\68\74\00\33\0f\61\73\2d\74\65\73"
  "\74\2d\6f\70\65\72\61\6e\64\00\34\0f\61\73\2d\63"
  "\6f\6d\70\61\72\65\2d\6c\65\66\74\00\35\10\61\73"
  "\2d\63\6f\6d\70\61\72\65\2d\72\69\67\68\74\00\36"
  "\12\61\73\2d\63\6f\6e\76\65\72\74\2d\6f\70\65\72"
  "\61\6e\64\00\37\13\61\73\2d\6d\65\6d\6f\72\79\2e"
  "\67\72\6f\77\2d\73\69\7a\65\00\38\09\87\80\80\80"
  "\00\01\00\41\00\0b\01\20\0a\e7\88\80\80\00\39\88"
  "\80\80\80\00\01\01\7f\41\00\22\00\0b\88\80\80\80"
  "\00\01\01\7e\42\00\22\00\0b\8b\80\80\80\00\01\01"
  "\7d\43\00\00\00\00\22\00\0b\8f\80\80\80\00\01\01"
  "\7c\44\00\00\00\00\00\00\00\00\22\00\0b\86\80\80"
  "\80\00\00\41\0a\22\00\0b\86\80\80\80\00\00\42\0b"
  "\22\00\0b\89\80\80\80\00\00\43\9a\99\31\41\22\00"
  "\0b\8d\80\80\80\00\00\44\66\66\66\66\66\66\28\40"
  "\22\00\0b\d2\80\80\80\00\03\01\7d\02\7e\01\7c\42"
  "\00\22\00\50\1a\43\00\00\00\00\22\01\8c\1a\44\00"
  "\00\00\00\00\00\00\00\22\02\9a\1a\41\00\22\03\45"
  "\1a\41\00\22\04\45\1a\43\00\00\00\00\22\05\8c\1a"
  "\42\00\22\06\50\1a\42\00\22\07\50\1a\44\00\00\00"
  "\00\00\00\00\00\22\08\9a\1a\0b\d5\80\80\80\00\03"
  "\01\7d\02\7e\01\7c\43\9a\99\99\be\22\01\1a\41\28"
  "\22\03\1a\41\79\22\04\1a\43\00\00\b0\40\22\05\1a"
  "\42\06\22\06\1a\44\00\00\00\00\00\00\20\40\22\08"
  "\1a\20\00\ba\20\01\bb\20\02\20\03\b8\20\04\b7\20"
  "\05\bb\20\06\ba\20\07\ba\20\08\a0\a0\a0\a0\a0\a0"
  "\a0\a0\b0\0b\cf\80\80\80\00\03\01\7d\02\7e\01\7c"
  "\42\01\22\00\ba\43\00\00\00\40\22\01\bb\44\66\66"
  "\66\66\66\66\0a\40\22\02\41\04\22\03\b8\41\05\22"
  "\04\b7\43\00\00\b0\40\22\05\bb\42\06\22\06\ba\42"
  "\00\22\07\ba\44\00\00\00\00\00\00\20\40\22\08\a0"
  "\a0\a0\a0\a0\a0\a0\a0\0b\82\80\80\80\00\00\0b\8b"
  "\80\80\80\00\00\02\7f\41\01\22\00\10\0b\0b\0b\8d"
  "\80\80\80\00\00\02\7f\10\0b\41\01\22\00\10\0b\0b"
  "\0b\8d\80\80\80\00\00\02\7f\10\0b\10\0b\41\01\22"
  "\00\0b\0b\8b\80\80\80\00\00\03\7f\41\03\22\00\10"
  "\0b\0b\0b\8d\80\80\80\00\00\03\7f\10\0b\41\04\22"
  "\00\10\0b\0b\0b\8d\80\80\80\00\00\03\7f\10\0b\10"
  "\0b\41\05\22\00\0b\0b\8b\80\80\80\00\00\02\7f\41"
  "\09\22\00\0c\00\0b\0b\8b\80\80\80\00\00\02\40\41"
  "\01\22\00\0d\00\0b\0b\90\80\80\80\00\00\02\7f\41"
  "\08\22\00\41\01\0d\00\1a\41\07\0b\0b\90\80\80\80"
  "\00\00\02\7f\41\06\41\09\22\00\0d\00\1a\41\07\0b"
  "\0b\8e\80\80\80\00\00\02\40\41\00\22\00\0e\02\00"
  "\00\00\0b\0b\92\80\80\80\00\00\02\7f\41\0a\22\00"
  "\41\01\0e\02\00\00\00\41\07\0b\0b\91\80\80\80\00"
  "\00\02\7f\41\06\41\0b\22\00\0e\01\00\00\41\07\0b"
  "\0b\87\80\80\80\00\00\41\07\22\00\0f\0b\8e\80\80"
  "\80\00\00\41\02\22\00\04\7f\41\00\05\41\01\0b\0b"
  "\8e\80\80\80\00\00\20\00\04\7f\41\03\22\00\05\20"
  "\00\0b\0b\8e\80\80\80\00\00\20\00\04\7f\20\00\05"
  "\41\04\22\00\0b\0b\8b\80\80\80\00\00\41\05\22\00"
  "\20\00\20\01\1b\0b\8b\80\80\80\00\00\20\00\41\06"
  "\22\00\20\01\1b\0b\8b\80\80\80\00\00\41\00\41\01"
  "\41\07\22\00\1b\0b\84\80\80\80\00\00\41\7f\0b\8c"
  "\80\80\80\00\00\41\0c\22\00\41\02\41\03\10\20\0b"
  "\8c\80\80\80\00\00\41\01\41\0d\22\00\41\03\10\20"
  "\0b\8c\80\80\80\00\00\41\01\41\02\41\0e\22\00\10"
  "\20\0b\8f\80\80\80\00\00\41\01\22\00\41\02\41\03"
  "\41\00\11\00\00\0b\8f\80\80\80\00\00\41\01\41\02"
  "\22\00\41\03\41\00\11\00\00\0b\8f\80\80\80\00\00"
  "\41\01\41\02\41\03\22\00\41\00\11\00\00\0b\8f\80"
  "\80\80\00\00\41\01\41\02\41\03\41\00\22\00\11\00"
  "\00\0b\8a\80\80\80\00\01\01\7f\41\01\22\00\21\00"
  "\0b\88\80\80\80\00\00\41\01\22\00\22\00\0b\8a\80"
  "\80\80\00\01\01\7f\41\01\22\00\24\00\0b\89\80\80"
  "\80\00\00\41\01\22\00\28\02\00\0b\89\80\80\80\00"
  "\00\41\03\22\00\2c\00\00\0b\8b\80\80\80\00\00\41"
  "\1e\22\00\41\07\36\02\00\0b\8b\80\80\80\00\00\41"
  "\02\41\01\22\00\36\02\00\0b\8b\80\80\80\00\00\41"
  "\01\22\00\41\07\3a\00\00\0b\8b\80\80\80\00\00\41"
  "\02\41\01\22\00\3b\01\00\0b\8a\80\80\80\00\00\43"
  "\e2\f1\80\7f\22\00\8c\0b\89\80\80\80\00\00\41\03"
  "\22\00\41\0a\6a\0b\89\80\80\80\00\00\41\0a\41\04"
  "\22\00\6b\0b\87\80\80\80\00\00\41\00\22\00\45\0b"
  "\89\80\80\80\00\00\41\2b\22\00\41\0a\4c\0b\89\80"
  "\80\80\00\00\41\0a\41\2a\22\00\47\0b\87\80\80\80"
  "\00\00\42\29\22\00\a7\0b\88\80\80\80\00\00\41\28"
  "\22\00\40\00\0b"
)
(assert_return (invoke "type-local-i32") (i32.const 0))
(assert_return (invoke "type-local-i64") (i64.const 0))
(assert_return (invoke "type-local-f32") (f32.const 0))
(assert_return (invoke "type-local-f64") (f64.const 0))
(assert_return (invoke "type-param-i32" (i32.const 2)) (i32.const 10))
(assert_return (invoke "type-param-i64" (i64.const 3)) (i64.const 11))
(assert_return
  (invoke "type-param-f32" (f32.const 4.400_000_095_367_431_6))
  (f32.const 11.100_000_381_469_727)
)
(assert_return
  (invoke "type-param-f64" (f64.const 5.5))
  (f64.const 12.199_999_999_999_999)
)
(assert_return (invoke "as-block-first" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-block-mid" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-block-last" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-loop-first" (i32.const 0)) (i32.const 3))
(assert_return (invoke "as-loop-mid" (i32.const 0)) (i32.const 4))
(assert_return (invoke "as-loop-last" (i32.const 0)) (i32.const 5))
(assert_return (invoke "as-br-value" (i32.const 0)) (i32.const 9))
(assert_return (invoke "as-br_if-cond" (i32.const 0)))
(assert_return (invoke "as-br_if-value" (i32.const 0)) (i32.const 8))
(assert_return (invoke "as-br_if-value-cond" (i32.const 0)) (i32.const 6))
(assert_return (invoke "as-br_table-index" (i32.const 0)))
(assert_return (invoke "as-br_table-value" (i32.const 0)) (i32.const 10))
(assert_return (invoke "as-br_table-value-index" (i32.const 0)) (i32.const 6))
(assert_return (invoke "as-return-value" (i32.const 0)) (i32.const 7))
(assert_return (invoke "as-if-cond" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-if-then" (i32.const 1)) (i32.const 3))
(assert_return (invoke "as-if-else" (i32.const 0)) (i32.const 4))
(assert_return
  (invoke "as-select-first" (i32.const 0) (i32.const 1))
  (i32.const 5)
)
(assert_return
  (invoke "as-select-second" (i32.const 0) (i32.const 0))
  (i32.const 6)
)
(assert_return (invoke "as-select-cond" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-call-first" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-call-mid" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-call-last" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-call_indirect-first" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-call_indirect-mid" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-call_indirect-last" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-call_indirect-index" (i32.const 0)) (i32.const -1))
(assert_return (invoke "as-local.set-value"))
(assert_return (invoke "as-local.tee-value" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-global.set-value"))
(assert_return (invoke "as-load-address" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-loadN-address" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-store-address" (i32.const 0)))
(assert_return (invoke "as-store-value" (i32.const 0)))
(assert_return (invoke "as-storeN-address" (i32.const 0)))
(assert_return (invoke "as-storeN-value" (i32.const 0)))
(assert_return
  (invoke "as-unary-operand" (f32.const 0))
  (f32.const -nan:0xf1e2)
)
(assert_return (invoke "as-binary-left" (i32.const 0)) (i32.const 13))
(assert_return (invoke "as-binary-right" (i32.const 0)) (i32.const 6))
(assert_return (invoke "as-test-operand" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-compare-left" (i32.const 0)) (i32.const 0))
(assert_return (invoke "as-compare-right" (i32.const 0)) (i32.const 1))
(assert_return (invoke "as-convert-operand" (i64.const 0)) (i32.const 41))
(assert_return (invoke "as-memory.grow-size" (i32.const 0)) (i32.const 1))
(assert_return
  (invoke "type-mixed"
    (i64.const 1)
    (f32.const 2.200_000_047_683_715_8)
    (f64.const 3.299_999_999_999_999_8)
    (i32.const 4)
    (i32.const 5)
  )
)
(assert_return
  (invoke "write"
    (i64.const 1)
    (f32.const 2)
    (f64.const 3.299_999_999_999_999_8)
    (i32.const 4)
    (i32.const 5)
  )
  (i64.const 56)
)
(assert_return
  (invoke "result"
    (i64.const -1)
    (f32.const -2)
    (f64.const -3.299_999_999_999_999_8)
    (i32.const -4)
    (i32.const -5)
  )
  (f64.const 34.799_999_999_999_997)
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7e\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\01\01\7f\41\00\22\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
    "\01\8c\80\80\80\00\01\01\7d\43\00\00\00\00\22\00"
    "\45\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\02\01\7c\01\7e\42\00\22\01\9a"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8d\80\80\80\00"
    "\01\87\80\80\80\00\01\01\7f\01\22\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\01\01\7f\43\00\00\00\00\22\00"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\95\80\80\80\00"
    "\01\8f\80\80\80\00\01\01\7d\44\00\00\00\00\00\00"
    "\00\00\22\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\97\80\80\80\00"
    "\01\91\80\80\80\00\02\01\7c\01\7e\44\00\00\00\00"
    "\00\00\00\00\22\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7f\01\7e\03\82\80\80\80\00\01\00\0a\8a\80\80"
    "\80\00\01\84\80\80\80\00\00\20\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7d\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\20\00\45\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7c\7e\00\03\82\80\80\80\00\01\00\0a\8b\80\80"
    "\80\00\01\85\80\80\80\00\00\20\01\9a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\01\22\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\43\00\00\00\00\22\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7d\00\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\44\00\00\00\00\00\00\00"
    "\00\22\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7c\7e\00\03\82\80\80\80\00\01\00\0a\93\80\80"
    "\80\00\01\8d\80\80\80\00\00\44\00\00\00\00\00\00"
    "\00\00\22\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8b\80\80\80"
    "\00\01\85\80\80\80\00\00\22\00\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\41\00\02\40\22\00\1a\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\41\00\03\40\22\00\1a\0b"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\41\00\41\00\04\40\22\00"
    "\1a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\95\80\80\80"
    "\00\01\8f\80\80\80\00\00\41\00\41\00\04\7f\41\00"
    "\05\22\00\0b\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\92\80\80\80"
    "\00\01\8c\80\80\80\00\00\41\00\02\40\22\00\0c\00"
    "\1a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\94\80\80\80"
    "\00\01\8e\80\80\80\00\00\41\00\02\40\22\00\41\01"
    "\0d\00\1a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\93\80\80\80"
    "\00\01\8d\80\80\80\00\00\41\00\02\40\22\00\0e\00"
    "\00\1a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8c\80\80\80"
    "\00\01\86\80\80\80\00\00\22\00\0f\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\00\22\00\41\01\41\02\1b\1a"
    "\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
    "\01\7f\00\60\01\7f\01\7f\03\83\80\80\80\00\02\00"
    "\01\0a\96\80\80\80\00\02\87\80\80\80\00\00\22\00"
    "\10\01\1a\0b\84\80\80\80\00\00\20\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
    "\01\7f\01\7f\60\01\7f\00\03\83\80\80\80\00\02\00"
    "\01\04\85\80\80\80\00\01\70\01\01\01\09\87\80\80"
    "\80\00\01\00\41\00\0b\01\00\0a\9c\80\80\80\00\02"
    "\84\80\80\80\00\00\20\00\0b\8d\80\80\80\00\00\02"
    "\7f\22\00\41\00\11\00\00\1a\0b\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8f\80\80\80"
    "\00\01\89\80\80\80\00\00\22\00\21\00\20\00\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8d\80\80\80"
    "\00\01\87\80\80\80\00\00\22\00\22\00\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\06\86\80\80\80"
    "\00\01\7f\01\41\00\0b\0a\8f\80\80\80\00\01\89\80"
    "\80\80\00\00\22\00\24\00\23\00\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8d\80\80\80\00\01\87\80\80\80\00"
    "\00\22\00\40\00\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8e\80\80\80\00\01\88\80\80\80\00"
    "\00\22\00\28\02\00\1a\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\01\0a\8f\80\80\80\00\01\89\80\80\80\00"
    "\00\22\00\41\01\36\02\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80\00"
    "\01\88\80\80\80\00\02\01\7f\01\7e\20\03\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\91\80\80\80\00"
    "\01\8b\80\80\80\00\02\01\7f\01\7e\20\f7\a4\ea\06"
    "\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7f\7e\00\03\82\80\80\80\00\01\00\0a\8a\80\80"
    "\80\00\01\84\80\80\80\00\00\20\02\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
    "\00\00\03\82\80\80\80\00\01\00\0a\92\80\80\80\00"
    "\01\8c\80\80\80\00\02\01\7f\01\7e\20\f7\f2\ce\d4"
    "\02\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7f\00\03\82\80\80\80\00\01\00\0a\8e\80\80\80"
    "\00\01\88\80\80\80\00\02\01\7f\01\7e\20\03\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7e\00\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\02\01\7f\01\7e\20\f7\a8\99"
    "\66\0b"
  )
  "unknown local"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7d\00\03\82\80\80\80\00\01\00\0a\91\80\80\80"
    "\00\01\8b\80\80\80\00\01\01\7f\43\00\00\00\00\22"
    "\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\02\7e\7f\00\03\82\80\80\80\00\01\00\0a\91\80\80"
    "\80\00\01\8b\80\80\80\00\01\01\7d\43\00\00\00\00"
    "\22\01\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\01\7e\00\03\82\80\80\80\00\01\00\0a\90\80\80\80"
    "\00\01\8a\80\80\80\00\02\01\7c\01\7e\42\00\22\01"
    "\0b"
  )
  "type mismatch"
)
